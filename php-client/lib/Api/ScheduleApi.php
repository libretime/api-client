<?php
/**
 * ScheduleApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LibreTime API
 *
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Libretime\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Libretime\Client\ApiException;
use Libretime\Client\Configuration;
use Libretime\Client\HeaderSelector;
use Libretime\Client\ObjectSerializer;

/**
 * ScheduleApi Class Doc Comment
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ScheduleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation scheduleCreate
     *
     * @param  \Libretime\Client\Model\Schedule $schedule schedule (required)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Libretime\Client\Model\Schedule
     */
    public function scheduleCreate($schedule)
    {
        list($response) = $this->scheduleCreateWithHttpInfo($schedule);
        return $response;
    }

    /**
     * Operation scheduleCreateWithHttpInfo
     *
     * @param  \Libretime\Client\Model\Schedule $schedule (required)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Libretime\Client\Model\Schedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleCreateWithHttpInfo($schedule)
    {
        $request = $this->scheduleCreateRequest($schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Libretime\Client\Model\Schedule' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Libretime\Client\Model\Schedule' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Libretime\Client\Model\Schedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Libretime\Client\Model\Schedule';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Libretime\Client\Model\Schedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleCreateAsync
     *
     * @param  \Libretime\Client\Model\Schedule $schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleCreateAsync($schedule)
    {
        return $this->scheduleCreateAsyncWithHttpInfo($schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleCreateAsyncWithHttpInfo
     *
     * @param  \Libretime\Client\Model\Schedule $schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleCreateAsyncWithHttpInfo($schedule)
    {
        $returnType = '\Libretime\Client\Model\Schedule';
        $request = $this->scheduleCreateRequest($schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleCreate'
     *
     * @param  \Libretime\Client\Model\Schedule $schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scheduleCreateRequest($schedule)
    {
        // verify the required parameter 'schedule' is set
        if ($schedule === null || (is_array($schedule) && count($schedule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule when calling scheduleCreate'
            );
        }

        $resourcePath = '/api/v2/schedule/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($schedule)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($schedule));
            } else {
                $httpBody = $schedule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleDestroy
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function scheduleDestroy($id)
    {
        $this->scheduleDestroyWithHttpInfo($id);
    }

    /**
     * Operation scheduleDestroyWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleDestroyWithHttpInfo($id)
    {
        $request = $this->scheduleDestroyRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleDestroyAsync
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleDestroyAsync($id)
    {
        return $this->scheduleDestroyAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleDestroyAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleDestroyAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->scheduleDestroyRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleDestroy'
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scheduleDestroyRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling scheduleDestroy'
            );
        }

        $resourcePath = '/api/v2/schedule/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleList
     *
     * @param  int $broadcasted broadcasted (optional)
     * @param  int $broadcasted__gt broadcasted__gt (optional)
     * @param  int $broadcasted__gte broadcasted__gte (optional)
     * @param  int $broadcasted__lt broadcasted__lt (optional)
     * @param  int $broadcasted__lte broadcasted__lte (optional)
     * @param  int[] $broadcasted__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $ends ends (optional)
     * @param  \DateTime $ends__gt ends__gt (optional)
     * @param  \DateTime $ends__gte ends__gte (optional)
     * @param  \DateTime $ends__lt ends__lt (optional)
     * @param  \DateTime $ends__lte ends__lte (optional)
     * @param  \DateTime[] $ends__range Multiple values may be separated by commas. (optional)
     * @param  bool $is_valid Filter on valid instances (optional)
     * @param  int $playout_status playout_status (optional)
     * @param  int $playout_status__gt playout_status__gt (optional)
     * @param  int $playout_status__gte playout_status__gte (optional)
     * @param  int $playout_status__lt playout_status__lt (optional)
     * @param  int $playout_status__lte playout_status__lte (optional)
     * @param  int[] $playout_status__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $starts starts (optional)
     * @param  \DateTime $starts__gt starts__gt (optional)
     * @param  \DateTime $starts__gte starts__gte (optional)
     * @param  \DateTime $starts__lt starts__lt (optional)
     * @param  \DateTime $starts__lte starts__lte (optional)
     * @param  \DateTime[] $starts__range Multiple values may be separated by commas. (optional)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Libretime\Client\Model\Schedule[]
     */
    public function scheduleList($broadcasted = null, $broadcasted__gt = null, $broadcasted__gte = null, $broadcasted__lt = null, $broadcasted__lte = null, $broadcasted__range = null, $ends = null, $ends__gt = null, $ends__gte = null, $ends__lt = null, $ends__lte = null, $ends__range = null, $is_valid = null, $playout_status = null, $playout_status__gt = null, $playout_status__gte = null, $playout_status__lt = null, $playout_status__lte = null, $playout_status__range = null, $starts = null, $starts__gt = null, $starts__gte = null, $starts__lt = null, $starts__lte = null, $starts__range = null)
    {
        list($response) = $this->scheduleListWithHttpInfo($broadcasted, $broadcasted__gt, $broadcasted__gte, $broadcasted__lt, $broadcasted__lte, $broadcasted__range, $ends, $ends__gt, $ends__gte, $ends__lt, $ends__lte, $ends__range, $is_valid, $playout_status, $playout_status__gt, $playout_status__gte, $playout_status__lt, $playout_status__lte, $playout_status__range, $starts, $starts__gt, $starts__gte, $starts__lt, $starts__lte, $starts__range);
        return $response;
    }

    /**
     * Operation scheduleListWithHttpInfo
     *
     * @param  int $broadcasted (optional)
     * @param  int $broadcasted__gt (optional)
     * @param  int $broadcasted__gte (optional)
     * @param  int $broadcasted__lt (optional)
     * @param  int $broadcasted__lte (optional)
     * @param  int[] $broadcasted__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $ends (optional)
     * @param  \DateTime $ends__gt (optional)
     * @param  \DateTime $ends__gte (optional)
     * @param  \DateTime $ends__lt (optional)
     * @param  \DateTime $ends__lte (optional)
     * @param  \DateTime[] $ends__range Multiple values may be separated by commas. (optional)
     * @param  bool $is_valid Filter on valid instances (optional)
     * @param  int $playout_status (optional)
     * @param  int $playout_status__gt (optional)
     * @param  int $playout_status__gte (optional)
     * @param  int $playout_status__lt (optional)
     * @param  int $playout_status__lte (optional)
     * @param  int[] $playout_status__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $starts (optional)
     * @param  \DateTime $starts__gt (optional)
     * @param  \DateTime $starts__gte (optional)
     * @param  \DateTime $starts__lt (optional)
     * @param  \DateTime $starts__lte (optional)
     * @param  \DateTime[] $starts__range Multiple values may be separated by commas. (optional)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Libretime\Client\Model\Schedule[], HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleListWithHttpInfo($broadcasted = null, $broadcasted__gt = null, $broadcasted__gte = null, $broadcasted__lt = null, $broadcasted__lte = null, $broadcasted__range = null, $ends = null, $ends__gt = null, $ends__gte = null, $ends__lt = null, $ends__lte = null, $ends__range = null, $is_valid = null, $playout_status = null, $playout_status__gt = null, $playout_status__gte = null, $playout_status__lt = null, $playout_status__lte = null, $playout_status__range = null, $starts = null, $starts__gt = null, $starts__gte = null, $starts__lt = null, $starts__lte = null, $starts__range = null)
    {
        $request = $this->scheduleListRequest($broadcasted, $broadcasted__gt, $broadcasted__gte, $broadcasted__lt, $broadcasted__lte, $broadcasted__range, $ends, $ends__gt, $ends__gte, $ends__lt, $ends__lte, $ends__range, $is_valid, $playout_status, $playout_status__gt, $playout_status__gte, $playout_status__lt, $playout_status__lte, $playout_status__range, $starts, $starts__gt, $starts__gte, $starts__lt, $starts__lte, $starts__range);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Libretime\Client\Model\Schedule[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Libretime\Client\Model\Schedule[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Libretime\Client\Model\Schedule[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Libretime\Client\Model\Schedule[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Libretime\Client\Model\Schedule[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleListAsync
     *
     * @param  int $broadcasted (optional)
     * @param  int $broadcasted__gt (optional)
     * @param  int $broadcasted__gte (optional)
     * @param  int $broadcasted__lt (optional)
     * @param  int $broadcasted__lte (optional)
     * @param  int[] $broadcasted__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $ends (optional)
     * @param  \DateTime $ends__gt (optional)
     * @param  \DateTime $ends__gte (optional)
     * @param  \DateTime $ends__lt (optional)
     * @param  \DateTime $ends__lte (optional)
     * @param  \DateTime[] $ends__range Multiple values may be separated by commas. (optional)
     * @param  bool $is_valid Filter on valid instances (optional)
     * @param  int $playout_status (optional)
     * @param  int $playout_status__gt (optional)
     * @param  int $playout_status__gte (optional)
     * @param  int $playout_status__lt (optional)
     * @param  int $playout_status__lte (optional)
     * @param  int[] $playout_status__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $starts (optional)
     * @param  \DateTime $starts__gt (optional)
     * @param  \DateTime $starts__gte (optional)
     * @param  \DateTime $starts__lt (optional)
     * @param  \DateTime $starts__lte (optional)
     * @param  \DateTime[] $starts__range Multiple values may be separated by commas. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleListAsync($broadcasted = null, $broadcasted__gt = null, $broadcasted__gte = null, $broadcasted__lt = null, $broadcasted__lte = null, $broadcasted__range = null, $ends = null, $ends__gt = null, $ends__gte = null, $ends__lt = null, $ends__lte = null, $ends__range = null, $is_valid = null, $playout_status = null, $playout_status__gt = null, $playout_status__gte = null, $playout_status__lt = null, $playout_status__lte = null, $playout_status__range = null, $starts = null, $starts__gt = null, $starts__gte = null, $starts__lt = null, $starts__lte = null, $starts__range = null)
    {
        return $this->scheduleListAsyncWithHttpInfo($broadcasted, $broadcasted__gt, $broadcasted__gte, $broadcasted__lt, $broadcasted__lte, $broadcasted__range, $ends, $ends__gt, $ends__gte, $ends__lt, $ends__lte, $ends__range, $is_valid, $playout_status, $playout_status__gt, $playout_status__gte, $playout_status__lt, $playout_status__lte, $playout_status__range, $starts, $starts__gt, $starts__gte, $starts__lt, $starts__lte, $starts__range)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleListAsyncWithHttpInfo
     *
     * @param  int $broadcasted (optional)
     * @param  int $broadcasted__gt (optional)
     * @param  int $broadcasted__gte (optional)
     * @param  int $broadcasted__lt (optional)
     * @param  int $broadcasted__lte (optional)
     * @param  int[] $broadcasted__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $ends (optional)
     * @param  \DateTime $ends__gt (optional)
     * @param  \DateTime $ends__gte (optional)
     * @param  \DateTime $ends__lt (optional)
     * @param  \DateTime $ends__lte (optional)
     * @param  \DateTime[] $ends__range Multiple values may be separated by commas. (optional)
     * @param  bool $is_valid Filter on valid instances (optional)
     * @param  int $playout_status (optional)
     * @param  int $playout_status__gt (optional)
     * @param  int $playout_status__gte (optional)
     * @param  int $playout_status__lt (optional)
     * @param  int $playout_status__lte (optional)
     * @param  int[] $playout_status__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $starts (optional)
     * @param  \DateTime $starts__gt (optional)
     * @param  \DateTime $starts__gte (optional)
     * @param  \DateTime $starts__lt (optional)
     * @param  \DateTime $starts__lte (optional)
     * @param  \DateTime[] $starts__range Multiple values may be separated by commas. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleListAsyncWithHttpInfo($broadcasted = null, $broadcasted__gt = null, $broadcasted__gte = null, $broadcasted__lt = null, $broadcasted__lte = null, $broadcasted__range = null, $ends = null, $ends__gt = null, $ends__gte = null, $ends__lt = null, $ends__lte = null, $ends__range = null, $is_valid = null, $playout_status = null, $playout_status__gt = null, $playout_status__gte = null, $playout_status__lt = null, $playout_status__lte = null, $playout_status__range = null, $starts = null, $starts__gt = null, $starts__gte = null, $starts__lt = null, $starts__lte = null, $starts__range = null)
    {
        $returnType = '\Libretime\Client\Model\Schedule[]';
        $request = $this->scheduleListRequest($broadcasted, $broadcasted__gt, $broadcasted__gte, $broadcasted__lt, $broadcasted__lte, $broadcasted__range, $ends, $ends__gt, $ends__gte, $ends__lt, $ends__lte, $ends__range, $is_valid, $playout_status, $playout_status__gt, $playout_status__gte, $playout_status__lt, $playout_status__lte, $playout_status__range, $starts, $starts__gt, $starts__gte, $starts__lt, $starts__lte, $starts__range);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleList'
     *
     * @param  int $broadcasted (optional)
     * @param  int $broadcasted__gt (optional)
     * @param  int $broadcasted__gte (optional)
     * @param  int $broadcasted__lt (optional)
     * @param  int $broadcasted__lte (optional)
     * @param  int[] $broadcasted__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $ends (optional)
     * @param  \DateTime $ends__gt (optional)
     * @param  \DateTime $ends__gte (optional)
     * @param  \DateTime $ends__lt (optional)
     * @param  \DateTime $ends__lte (optional)
     * @param  \DateTime[] $ends__range Multiple values may be separated by commas. (optional)
     * @param  bool $is_valid Filter on valid instances (optional)
     * @param  int $playout_status (optional)
     * @param  int $playout_status__gt (optional)
     * @param  int $playout_status__gte (optional)
     * @param  int $playout_status__lt (optional)
     * @param  int $playout_status__lte (optional)
     * @param  int[] $playout_status__range Multiple values may be separated by commas. (optional)
     * @param  \DateTime $starts (optional)
     * @param  \DateTime $starts__gt (optional)
     * @param  \DateTime $starts__gte (optional)
     * @param  \DateTime $starts__lt (optional)
     * @param  \DateTime $starts__lte (optional)
     * @param  \DateTime[] $starts__range Multiple values may be separated by commas. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scheduleListRequest($broadcasted = null, $broadcasted__gt = null, $broadcasted__gte = null, $broadcasted__lt = null, $broadcasted__lte = null, $broadcasted__range = null, $ends = null, $ends__gt = null, $ends__gte = null, $ends__lt = null, $ends__lte = null, $ends__range = null, $is_valid = null, $playout_status = null, $playout_status__gt = null, $playout_status__gte = null, $playout_status__lt = null, $playout_status__lte = null, $playout_status__range = null, $starts = null, $starts__gt = null, $starts__gte = null, $starts__lt = null, $starts__lte = null, $starts__range = null)
    {

        $resourcePath = '/api/v2/schedule/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $broadcasted,
            'broadcasted', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $broadcasted__gt,
            'broadcasted__gt', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $broadcasted__gte,
            'broadcasted__gte', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $broadcasted__lt,
            'broadcasted__lt', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $broadcasted__lte,
            'broadcasted__lte', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $broadcasted__range,
            'broadcasted__range', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ends,
            'ends', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ends__gt,
            'ends__gt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ends__gte,
            'ends__gte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ends__lt,
            'ends__lt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ends__lte,
            'ends__lte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ends__range,
            'ends__range', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_valid,
            'is_valid', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $playout_status,
            'playout_status', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $playout_status__gt,
            'playout_status__gt', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $playout_status__gte,
            'playout_status__gte', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $playout_status__lt,
            'playout_status__lt', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $playout_status__lte,
            'playout_status__lte', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $playout_status__range,
            'playout_status__range', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starts,
            'starts', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starts__gt,
            'starts__gt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starts__gte,
            'starts__gte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starts__lt,
            'starts__lt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starts__lte,
            'starts__lte', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $starts__range,
            'starts__range', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation schedulePartialUpdate
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\PatchedSchedule $patched_schedule patched_schedule (optional)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Libretime\Client\Model\Schedule
     */
    public function schedulePartialUpdate($id, $patched_schedule = null)
    {
        list($response) = $this->schedulePartialUpdateWithHttpInfo($id, $patched_schedule);
        return $response;
    }

    /**
     * Operation schedulePartialUpdateWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\PatchedSchedule $patched_schedule (optional)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Libretime\Client\Model\Schedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function schedulePartialUpdateWithHttpInfo($id, $patched_schedule = null)
    {
        $request = $this->schedulePartialUpdateRequest($id, $patched_schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Libretime\Client\Model\Schedule' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Libretime\Client\Model\Schedule' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Libretime\Client\Model\Schedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Libretime\Client\Model\Schedule';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Libretime\Client\Model\Schedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation schedulePartialUpdateAsync
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\PatchedSchedule $patched_schedule (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function schedulePartialUpdateAsync($id, $patched_schedule = null)
    {
        return $this->schedulePartialUpdateAsyncWithHttpInfo($id, $patched_schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation schedulePartialUpdateAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\PatchedSchedule $patched_schedule (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function schedulePartialUpdateAsyncWithHttpInfo($id, $patched_schedule = null)
    {
        $returnType = '\Libretime\Client\Model\Schedule';
        $request = $this->schedulePartialUpdateRequest($id, $patched_schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'schedulePartialUpdate'
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\PatchedSchedule $patched_schedule (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function schedulePartialUpdateRequest($id, $patched_schedule = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling schedulePartialUpdate'
            );
        }

        $resourcePath = '/api/v2/schedule/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($patched_schedule)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($patched_schedule));
            } else {
                $httpBody = $patched_schedule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleRetrieve
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Libretime\Client\Model\Schedule
     */
    public function scheduleRetrieve($id)
    {
        list($response) = $this->scheduleRetrieveWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation scheduleRetrieveWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Libretime\Client\Model\Schedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleRetrieveWithHttpInfo($id)
    {
        $request = $this->scheduleRetrieveRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Libretime\Client\Model\Schedule' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Libretime\Client\Model\Schedule' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Libretime\Client\Model\Schedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Libretime\Client\Model\Schedule';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Libretime\Client\Model\Schedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleRetrieveAsync
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleRetrieveAsync($id)
    {
        return $this->scheduleRetrieveAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleRetrieveAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleRetrieveAsyncWithHttpInfo($id)
    {
        $returnType = '\Libretime\Client\Model\Schedule';
        $request = $this->scheduleRetrieveRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleRetrieve'
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scheduleRetrieveRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling scheduleRetrieve'
            );
        }

        $resourcePath = '/api/v2/schedule/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleUpdate
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\Schedule $schedule schedule (required)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Libretime\Client\Model\Schedule
     */
    public function scheduleUpdate($id, $schedule)
    {
        list($response) = $this->scheduleUpdateWithHttpInfo($id, $schedule);
        return $response;
    }

    /**
     * Operation scheduleUpdateWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\Schedule $schedule (required)
     *
     * @throws \Libretime\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Libretime\Client\Model\Schedule, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleUpdateWithHttpInfo($id, $schedule)
    {
        $request = $this->scheduleUpdateRequest($id, $schedule);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Libretime\Client\Model\Schedule' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Libretime\Client\Model\Schedule' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Libretime\Client\Model\Schedule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Libretime\Client\Model\Schedule';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Libretime\Client\Model\Schedule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleUpdateAsync
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\Schedule $schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleUpdateAsync($id, $schedule)
    {
        return $this->scheduleUpdateAsyncWithHttpInfo($id, $schedule)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleUpdateAsyncWithHttpInfo
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\Schedule $schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleUpdateAsyncWithHttpInfo($id, $schedule)
    {
        $returnType = '\Libretime\Client\Model\Schedule';
        $request = $this->scheduleUpdateRequest($id, $schedule);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleUpdate'
     *
     * @param  int $id A unique integer value identifying this schedule. (required)
     * @param  \Libretime\Client\Model\Schedule $schedule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function scheduleUpdateRequest($id, $schedule)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling scheduleUpdate'
            );
        }
        // verify the required parameter 'schedule' is set
        if ($schedule === null || (is_array($schedule) && count($schedule) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule when calling scheduleUpdate'
            );
        }

        $resourcePath = '/api/v2/schedule/{id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($schedule)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($schedule));
            } else {
                $httpBody = $schedule;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('sessionid');
        if ($apiKey !== null) {
            
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

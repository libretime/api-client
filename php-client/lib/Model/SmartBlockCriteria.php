<?php
/**
 * SmartBlockCriteria
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LibreTime API
 *
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-beta
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Libretime\Client\Model;

use \ArrayAccess;
use \Libretime\Client\ObjectSerializer;

/**
 * SmartBlockCriteria Class Doc Comment
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SmartBlockCriteria implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SmartBlockCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_url' => 'string',
        'criteria' => 'string',
        'modifier' => 'string',
        'value' => 'string',
        'extra' => 'string',
        'criteriagroup' => 'int',
        'block' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_url' => 'uri',
        'criteria' => null,
        'modifier' => null,
        'value' => null,
        'extra' => null,
        'criteriagroup' => null,
        'block' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_url' => 'item_url',
        'criteria' => 'criteria',
        'modifier' => 'modifier',
        'value' => 'value',
        'extra' => 'extra',
        'criteriagroup' => 'criteriagroup',
        'block' => 'block'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_url' => 'setItemUrl',
        'criteria' => 'setCriteria',
        'modifier' => 'setModifier',
        'value' => 'setValue',
        'extra' => 'setExtra',
        'criteriagroup' => 'setCriteriagroup',
        'block' => 'setBlock'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_url' => 'getItemUrl',
        'criteria' => 'getCriteria',
        'modifier' => 'getModifier',
        'value' => 'getValue',
        'extra' => 'getExtra',
        'criteriagroup' => 'getCriteriagroup',
        'block' => 'getBlock'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_url'] = $data['item_url'] ?? null;
        $this->container['criteria'] = $data['criteria'] ?? null;
        $this->container['modifier'] = $data['modifier'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['extra'] = $data['extra'] ?? null;
        $this->container['criteriagroup'] = $data['criteriagroup'] ?? null;
        $this->container['block'] = $data['block'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_url'] === null) {
            $invalidProperties[] = "'item_url' can't be null";
        }
        if ($this->container['criteria'] === null) {
            $invalidProperties[] = "'criteria' can't be null";
        }
        if ((mb_strlen($this->container['criteria']) > 32)) {
            $invalidProperties[] = "invalid value for 'criteria', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['modifier'] === null) {
            $invalidProperties[] = "'modifier' can't be null";
        }
        if ((mb_strlen($this->container['modifier']) > 16)) {
            $invalidProperties[] = "invalid value for 'modifier', the character length must be smaller than or equal to 16.";
        }

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ((mb_strlen($this->container['value']) > 512)) {
            $invalidProperties[] = "invalid value for 'value', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extra']) && (mb_strlen($this->container['extra']) > 512)) {
            $invalidProperties[] = "invalid value for 'extra', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['criteriagroup']) && ($this->container['criteriagroup'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'criteriagroup', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['criteriagroup']) && ($this->container['criteriagroup'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'criteriagroup', must be bigger than or equal to -2147483648.";
        }

        if ($this->container['block'] === null) {
            $invalidProperties[] = "'block' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_url
     *
     * @return string
     */
    public function getItemUrl()
    {
        return $this->container['item_url'];
    }

    /**
     * Sets item_url
     *
     * @param string $item_url item_url
     *
     * @return self
     */
    public function setItemUrl($item_url)
    {
        $this->container['item_url'] = $item_url;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return string
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param string $criteria criteria
     *
     * @return self
     */
    public function setCriteria($criteria)
    {
        if ((mb_strlen($criteria) > 32)) {
            throw new \InvalidArgumentException('invalid length for $criteria when calling SmartBlockCriteria., must be smaller than or equal to 32.');
        }

        $this->container['criteria'] = $criteria;

        return $this;
    }

    /**
     * Gets modifier
     *
     * @return string
     */
    public function getModifier()
    {
        return $this->container['modifier'];
    }

    /**
     * Sets modifier
     *
     * @param string $modifier modifier
     *
     * @return self
     */
    public function setModifier($modifier)
    {
        if ((mb_strlen($modifier) > 16)) {
            throw new \InvalidArgumentException('invalid length for $modifier when calling SmartBlockCriteria., must be smaller than or equal to 16.');
        }

        $this->container['modifier'] = $modifier;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if ((mb_strlen($value) > 512)) {
            throw new \InvalidArgumentException('invalid length for $value when calling SmartBlockCriteria., must be smaller than or equal to 512.');
        }

        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string|null
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param string|null $extra extra
     *
     * @return self
     */
    public function setExtra($extra)
    {
        if (!is_null($extra) && (mb_strlen($extra) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extra when calling SmartBlockCriteria., must be smaller than or equal to 512.');
        }

        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets criteriagroup
     *
     * @return int|null
     */
    public function getCriteriagroup()
    {
        return $this->container['criteriagroup'];
    }

    /**
     * Sets criteriagroup
     *
     * @param int|null $criteriagroup criteriagroup
     *
     * @return self
     */
    public function setCriteriagroup($criteriagroup)
    {

        if (!is_null($criteriagroup) && ($criteriagroup > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $criteriagroup when calling SmartBlockCriteria., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($criteriagroup) && ($criteriagroup < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $criteriagroup when calling SmartBlockCriteria., must be bigger than or equal to -2147483648.');
        }

        $this->container['criteriagroup'] = $criteriagroup;

        return $this;
    }

    /**
     * Gets block
     *
     * @return string
     */
    public function getBlock()
    {
        return $this->container['block'];
    }

    /**
     * Sets block
     *
     * @param string $block block
     *
     * @return self
     */
    public function setBlock($block)
    {
        $this->container['block'] = $block;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



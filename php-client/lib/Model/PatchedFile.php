<?php
/**
 * PatchedFile
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LibreTime API
 *
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-beta
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Libretime\Client\Model;

use \ArrayAccess;
use \Libretime\Client\ObjectSerializer;

/**
 * PatchedFile Class Doc Comment
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PatchedFile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PatchedFile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_url' => 'string',
        'id' => 'int',
        'name' => 'string',
        'mime' => 'string',
        'ftype' => 'string',
        'filepath' => 'string',
        'import_status' => 'int',
        'currently_accessing' => 'int',
        'mtime' => '\DateTime',
        'utime' => '\DateTime',
        'lptime' => '\DateTime',
        'md5' => 'string',
        'track_title' => 'string',
        'artist_name' => 'string',
        'bit_rate' => 'int',
        'sample_rate' => 'int',
        'format' => 'string',
        'length' => 'string',
        'album_title' => 'string',
        'genre' => 'string',
        'comments' => 'string',
        'year' => 'string',
        'track_number' => 'int',
        'channels' => 'int',
        'url' => 'string',
        'bpm' => 'int',
        'rating' => 'string',
        'encoded_by' => 'string',
        'disc_number' => 'string',
        'mood' => 'string',
        'label' => 'string',
        'composer' => 'string',
        'encoder' => 'string',
        'checksum' => 'string',
        'lyrics' => 'string',
        'orchestra' => 'string',
        'conductor' => 'string',
        'lyricist' => 'string',
        'original_lyricist' => 'string',
        'radio_station_name' => 'string',
        'info_url' => 'string',
        'artist_url' => 'string',
        'audio_source_url' => 'string',
        'radio_station_url' => 'string',
        'buy_this_url' => 'string',
        'isrc_number' => 'string',
        'catalog_number' => 'string',
        'original_artist' => 'string',
        'copyright' => 'string',
        'report_datetime' => 'string',
        'report_location' => 'string',
        'report_organization' => 'string',
        'subject' => 'string',
        'contributor' => 'string',
        'language' => 'string',
        'file_exists' => 'bool',
        'replay_gain' => 'float',
        'cuein' => 'string',
        'cueout' => 'string',
        'silan_check' => 'bool',
        'hidden' => 'bool',
        'is_scheduled' => 'bool',
        'is_playlist' => 'bool',
        'filesize' => 'int',
        'description' => 'string',
        'artwork' => 'string',
        'track_type' => 'string',
        'directory' => 'string',
        'edited_by' => 'string',
        'owner' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_url' => 'uri',
        'id' => null,
        'name' => null,
        'mime' => null,
        'ftype' => null,
        'filepath' => null,
        'import_status' => null,
        'currently_accessing' => null,
        'mtime' => 'date-time',
        'utime' => 'date-time',
        'lptime' => 'date-time',
        'md5' => null,
        'track_title' => null,
        'artist_name' => null,
        'bit_rate' => null,
        'sample_rate' => null,
        'format' => null,
        'length' => null,
        'album_title' => null,
        'genre' => null,
        'comments' => null,
        'year' => null,
        'track_number' => null,
        'channels' => null,
        'url' => null,
        'bpm' => null,
        'rating' => null,
        'encoded_by' => null,
        'disc_number' => null,
        'mood' => null,
        'label' => null,
        'composer' => null,
        'encoder' => null,
        'checksum' => null,
        'lyrics' => null,
        'orchestra' => null,
        'conductor' => null,
        'lyricist' => null,
        'original_lyricist' => null,
        'radio_station_name' => null,
        'info_url' => null,
        'artist_url' => null,
        'audio_source_url' => null,
        'radio_station_url' => null,
        'buy_this_url' => null,
        'isrc_number' => null,
        'catalog_number' => null,
        'original_artist' => null,
        'copyright' => null,
        'report_datetime' => null,
        'report_location' => null,
        'report_organization' => null,
        'subject' => null,
        'contributor' => null,
        'language' => null,
        'file_exists' => null,
        'replay_gain' => 'decimal',
        'cuein' => null,
        'cueout' => null,
        'silan_check' => null,
        'hidden' => null,
        'is_scheduled' => null,
        'is_playlist' => null,
        'filesize' => null,
        'description' => null,
        'artwork' => null,
        'track_type' => null,
        'directory' => 'uri',
        'edited_by' => 'uri',
        'owner' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_url' => 'item_url',
        'id' => 'id',
        'name' => 'name',
        'mime' => 'mime',
        'ftype' => 'ftype',
        'filepath' => 'filepath',
        'import_status' => 'import_status',
        'currently_accessing' => 'currently_accessing',
        'mtime' => 'mtime',
        'utime' => 'utime',
        'lptime' => 'lptime',
        'md5' => 'md5',
        'track_title' => 'track_title',
        'artist_name' => 'artist_name',
        'bit_rate' => 'bit_rate',
        'sample_rate' => 'sample_rate',
        'format' => 'format',
        'length' => 'length',
        'album_title' => 'album_title',
        'genre' => 'genre',
        'comments' => 'comments',
        'year' => 'year',
        'track_number' => 'track_number',
        'channels' => 'channels',
        'url' => 'url',
        'bpm' => 'bpm',
        'rating' => 'rating',
        'encoded_by' => 'encoded_by',
        'disc_number' => 'disc_number',
        'mood' => 'mood',
        'label' => 'label',
        'composer' => 'composer',
        'encoder' => 'encoder',
        'checksum' => 'checksum',
        'lyrics' => 'lyrics',
        'orchestra' => 'orchestra',
        'conductor' => 'conductor',
        'lyricist' => 'lyricist',
        'original_lyricist' => 'original_lyricist',
        'radio_station_name' => 'radio_station_name',
        'info_url' => 'info_url',
        'artist_url' => 'artist_url',
        'audio_source_url' => 'audio_source_url',
        'radio_station_url' => 'radio_station_url',
        'buy_this_url' => 'buy_this_url',
        'isrc_number' => 'isrc_number',
        'catalog_number' => 'catalog_number',
        'original_artist' => 'original_artist',
        'copyright' => 'copyright',
        'report_datetime' => 'report_datetime',
        'report_location' => 'report_location',
        'report_organization' => 'report_organization',
        'subject' => 'subject',
        'contributor' => 'contributor',
        'language' => 'language',
        'file_exists' => 'file_exists',
        'replay_gain' => 'replay_gain',
        'cuein' => 'cuein',
        'cueout' => 'cueout',
        'silan_check' => 'silan_check',
        'hidden' => 'hidden',
        'is_scheduled' => 'is_scheduled',
        'is_playlist' => 'is_playlist',
        'filesize' => 'filesize',
        'description' => 'description',
        'artwork' => 'artwork',
        'track_type' => 'track_type',
        'directory' => 'directory',
        'edited_by' => 'edited_by',
        'owner' => 'owner'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_url' => 'setItemUrl',
        'id' => 'setId',
        'name' => 'setName',
        'mime' => 'setMime',
        'ftype' => 'setFtype',
        'filepath' => 'setFilepath',
        'import_status' => 'setImportStatus',
        'currently_accessing' => 'setCurrentlyAccessing',
        'mtime' => 'setMtime',
        'utime' => 'setUtime',
        'lptime' => 'setLptime',
        'md5' => 'setMd5',
        'track_title' => 'setTrackTitle',
        'artist_name' => 'setArtistName',
        'bit_rate' => 'setBitRate',
        'sample_rate' => 'setSampleRate',
        'format' => 'setFormat',
        'length' => 'setLength',
        'album_title' => 'setAlbumTitle',
        'genre' => 'setGenre',
        'comments' => 'setComments',
        'year' => 'setYear',
        'track_number' => 'setTrackNumber',
        'channels' => 'setChannels',
        'url' => 'setUrl',
        'bpm' => 'setBpm',
        'rating' => 'setRating',
        'encoded_by' => 'setEncodedBy',
        'disc_number' => 'setDiscNumber',
        'mood' => 'setMood',
        'label' => 'setLabel',
        'composer' => 'setComposer',
        'encoder' => 'setEncoder',
        'checksum' => 'setChecksum',
        'lyrics' => 'setLyrics',
        'orchestra' => 'setOrchestra',
        'conductor' => 'setConductor',
        'lyricist' => 'setLyricist',
        'original_lyricist' => 'setOriginalLyricist',
        'radio_station_name' => 'setRadioStationName',
        'info_url' => 'setInfoUrl',
        'artist_url' => 'setArtistUrl',
        'audio_source_url' => 'setAudioSourceUrl',
        'radio_station_url' => 'setRadioStationUrl',
        'buy_this_url' => 'setBuyThisUrl',
        'isrc_number' => 'setIsrcNumber',
        'catalog_number' => 'setCatalogNumber',
        'original_artist' => 'setOriginalArtist',
        'copyright' => 'setCopyright',
        'report_datetime' => 'setReportDatetime',
        'report_location' => 'setReportLocation',
        'report_organization' => 'setReportOrganization',
        'subject' => 'setSubject',
        'contributor' => 'setContributor',
        'language' => 'setLanguage',
        'file_exists' => 'setFileExists',
        'replay_gain' => 'setReplayGain',
        'cuein' => 'setCuein',
        'cueout' => 'setCueout',
        'silan_check' => 'setSilanCheck',
        'hidden' => 'setHidden',
        'is_scheduled' => 'setIsScheduled',
        'is_playlist' => 'setIsPlaylist',
        'filesize' => 'setFilesize',
        'description' => 'setDescription',
        'artwork' => 'setArtwork',
        'track_type' => 'setTrackType',
        'directory' => 'setDirectory',
        'edited_by' => 'setEditedBy',
        'owner' => 'setOwner'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_url' => 'getItemUrl',
        'id' => 'getId',
        'name' => 'getName',
        'mime' => 'getMime',
        'ftype' => 'getFtype',
        'filepath' => 'getFilepath',
        'import_status' => 'getImportStatus',
        'currently_accessing' => 'getCurrentlyAccessing',
        'mtime' => 'getMtime',
        'utime' => 'getUtime',
        'lptime' => 'getLptime',
        'md5' => 'getMd5',
        'track_title' => 'getTrackTitle',
        'artist_name' => 'getArtistName',
        'bit_rate' => 'getBitRate',
        'sample_rate' => 'getSampleRate',
        'format' => 'getFormat',
        'length' => 'getLength',
        'album_title' => 'getAlbumTitle',
        'genre' => 'getGenre',
        'comments' => 'getComments',
        'year' => 'getYear',
        'track_number' => 'getTrackNumber',
        'channels' => 'getChannels',
        'url' => 'getUrl',
        'bpm' => 'getBpm',
        'rating' => 'getRating',
        'encoded_by' => 'getEncodedBy',
        'disc_number' => 'getDiscNumber',
        'mood' => 'getMood',
        'label' => 'getLabel',
        'composer' => 'getComposer',
        'encoder' => 'getEncoder',
        'checksum' => 'getChecksum',
        'lyrics' => 'getLyrics',
        'orchestra' => 'getOrchestra',
        'conductor' => 'getConductor',
        'lyricist' => 'getLyricist',
        'original_lyricist' => 'getOriginalLyricist',
        'radio_station_name' => 'getRadioStationName',
        'info_url' => 'getInfoUrl',
        'artist_url' => 'getArtistUrl',
        'audio_source_url' => 'getAudioSourceUrl',
        'radio_station_url' => 'getRadioStationUrl',
        'buy_this_url' => 'getBuyThisUrl',
        'isrc_number' => 'getIsrcNumber',
        'catalog_number' => 'getCatalogNumber',
        'original_artist' => 'getOriginalArtist',
        'copyright' => 'getCopyright',
        'report_datetime' => 'getReportDatetime',
        'report_location' => 'getReportLocation',
        'report_organization' => 'getReportOrganization',
        'subject' => 'getSubject',
        'contributor' => 'getContributor',
        'language' => 'getLanguage',
        'file_exists' => 'getFileExists',
        'replay_gain' => 'getReplayGain',
        'cuein' => 'getCuein',
        'cueout' => 'getCueout',
        'silan_check' => 'getSilanCheck',
        'hidden' => 'getHidden',
        'is_scheduled' => 'getIsScheduled',
        'is_playlist' => 'getIsPlaylist',
        'filesize' => 'getFilesize',
        'description' => 'getDescription',
        'artwork' => 'getArtwork',
        'track_type' => 'getTrackType',
        'directory' => 'getDirectory',
        'edited_by' => 'getEditedBy',
        'owner' => 'getOwner'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_url'] = $data['item_url'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['mime'] = $data['mime'] ?? null;
        $this->container['ftype'] = $data['ftype'] ?? null;
        $this->container['filepath'] = $data['filepath'] ?? null;
        $this->container['import_status'] = $data['import_status'] ?? null;
        $this->container['currently_accessing'] = $data['currently_accessing'] ?? null;
        $this->container['mtime'] = $data['mtime'] ?? null;
        $this->container['utime'] = $data['utime'] ?? null;
        $this->container['lptime'] = $data['lptime'] ?? null;
        $this->container['md5'] = $data['md5'] ?? null;
        $this->container['track_title'] = $data['track_title'] ?? null;
        $this->container['artist_name'] = $data['artist_name'] ?? null;
        $this->container['bit_rate'] = $data['bit_rate'] ?? null;
        $this->container['sample_rate'] = $data['sample_rate'] ?? null;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['length'] = $data['length'] ?? null;
        $this->container['album_title'] = $data['album_title'] ?? null;
        $this->container['genre'] = $data['genre'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['year'] = $data['year'] ?? null;
        $this->container['track_number'] = $data['track_number'] ?? null;
        $this->container['channels'] = $data['channels'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['bpm'] = $data['bpm'] ?? null;
        $this->container['rating'] = $data['rating'] ?? null;
        $this->container['encoded_by'] = $data['encoded_by'] ?? null;
        $this->container['disc_number'] = $data['disc_number'] ?? null;
        $this->container['mood'] = $data['mood'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['composer'] = $data['composer'] ?? null;
        $this->container['encoder'] = $data['encoder'] ?? null;
        $this->container['checksum'] = $data['checksum'] ?? null;
        $this->container['lyrics'] = $data['lyrics'] ?? null;
        $this->container['orchestra'] = $data['orchestra'] ?? null;
        $this->container['conductor'] = $data['conductor'] ?? null;
        $this->container['lyricist'] = $data['lyricist'] ?? null;
        $this->container['original_lyricist'] = $data['original_lyricist'] ?? null;
        $this->container['radio_station_name'] = $data['radio_station_name'] ?? null;
        $this->container['info_url'] = $data['info_url'] ?? null;
        $this->container['artist_url'] = $data['artist_url'] ?? null;
        $this->container['audio_source_url'] = $data['audio_source_url'] ?? null;
        $this->container['radio_station_url'] = $data['radio_station_url'] ?? null;
        $this->container['buy_this_url'] = $data['buy_this_url'] ?? null;
        $this->container['isrc_number'] = $data['isrc_number'] ?? null;
        $this->container['catalog_number'] = $data['catalog_number'] ?? null;
        $this->container['original_artist'] = $data['original_artist'] ?? null;
        $this->container['copyright'] = $data['copyright'] ?? null;
        $this->container['report_datetime'] = $data['report_datetime'] ?? null;
        $this->container['report_location'] = $data['report_location'] ?? null;
        $this->container['report_organization'] = $data['report_organization'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['contributor'] = $data['contributor'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['file_exists'] = $data['file_exists'] ?? null;
        $this->container['replay_gain'] = $data['replay_gain'] ?? null;
        $this->container['cuein'] = $data['cuein'] ?? null;
        $this->container['cueout'] = $data['cueout'] ?? null;
        $this->container['silan_check'] = $data['silan_check'] ?? null;
        $this->container['hidden'] = $data['hidden'] ?? null;
        $this->container['is_scheduled'] = $data['is_scheduled'] ?? null;
        $this->container['is_playlist'] = $data['is_playlist'] ?? null;
        $this->container['filesize'] = $data['filesize'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['artwork'] = $data['artwork'] ?? null;
        $this->container['track_type'] = $data['track_type'] ?? null;
        $this->container['directory'] = $data['directory'] ?? null;
        $this->container['edited_by'] = $data['edited_by'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['mime']) && (mb_strlen($this->container['mime']) > 255)) {
            $invalidProperties[] = "invalid value for 'mime', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['ftype']) && (mb_strlen($this->container['ftype']) > 128)) {
            $invalidProperties[] = "invalid value for 'ftype', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['import_status']) && ($this->container['import_status'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'import_status', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['import_status']) && ($this->container['import_status'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'import_status', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['currently_accessing']) && ($this->container['currently_accessing'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'currently_accessing', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['currently_accessing']) && ($this->container['currently_accessing'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'currently_accessing', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['md5']) && (mb_strlen($this->container['md5']) > 32)) {
            $invalidProperties[] = "invalid value for 'md5', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['track_title']) && (mb_strlen($this->container['track_title']) > 512)) {
            $invalidProperties[] = "invalid value for 'track_title', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['artist_name']) && (mb_strlen($this->container['artist_name']) > 512)) {
            $invalidProperties[] = "invalid value for 'artist_name', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['bit_rate']) && ($this->container['bit_rate'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'bit_rate', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['bit_rate']) && ($this->container['bit_rate'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'bit_rate', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['sample_rate']) && ($this->container['sample_rate'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'sample_rate', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['sample_rate']) && ($this->container['sample_rate'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'sample_rate', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['format']) && (mb_strlen($this->container['format']) > 128)) {
            $invalidProperties[] = "invalid value for 'format', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['album_title']) && (mb_strlen($this->container['album_title']) > 512)) {
            $invalidProperties[] = "invalid value for 'album_title', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['genre']) && (mb_strlen($this->container['genre']) > 64)) {
            $invalidProperties[] = "invalid value for 'genre', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['year']) && (mb_strlen($this->container['year']) > 16)) {
            $invalidProperties[] = "invalid value for 'year', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['track_number']) && ($this->container['track_number'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'track_number', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['track_number']) && ($this->container['track_number'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'track_number', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['channels']) && ($this->container['channels'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'channels', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['channels']) && ($this->container['channels'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'channels', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 1024)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['bpm']) && ($this->container['bpm'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'bpm', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['bpm']) && ($this->container['bpm'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'bpm', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['rating']) && (mb_strlen($this->container['rating']) > 8)) {
            $invalidProperties[] = "invalid value for 'rating', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['encoded_by']) && (mb_strlen($this->container['encoded_by']) > 255)) {
            $invalidProperties[] = "invalid value for 'encoded_by', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['disc_number']) && (mb_strlen($this->container['disc_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'disc_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['mood']) && (mb_strlen($this->container['mood']) > 64)) {
            $invalidProperties[] = "invalid value for 'mood', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['label']) && (mb_strlen($this->container['label']) > 512)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['composer']) && (mb_strlen($this->container['composer']) > 512)) {
            $invalidProperties[] = "invalid value for 'composer', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['encoder']) && (mb_strlen($this->container['encoder']) > 64)) {
            $invalidProperties[] = "invalid value for 'encoder', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['checksum']) && (mb_strlen($this->container['checksum']) > 256)) {
            $invalidProperties[] = "invalid value for 'checksum', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['orchestra']) && (mb_strlen($this->container['orchestra']) > 512)) {
            $invalidProperties[] = "invalid value for 'orchestra', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['conductor']) && (mb_strlen($this->container['conductor']) > 512)) {
            $invalidProperties[] = "invalid value for 'conductor', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['lyricist']) && (mb_strlen($this->container['lyricist']) > 512)) {
            $invalidProperties[] = "invalid value for 'lyricist', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['original_lyricist']) && (mb_strlen($this->container['original_lyricist']) > 512)) {
            $invalidProperties[] = "invalid value for 'original_lyricist', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['radio_station_name']) && (mb_strlen($this->container['radio_station_name']) > 512)) {
            $invalidProperties[] = "invalid value for 'radio_station_name', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['info_url']) && (mb_strlen($this->container['info_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'info_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['artist_url']) && (mb_strlen($this->container['artist_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'artist_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['audio_source_url']) && (mb_strlen($this->container['audio_source_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'audio_source_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['radio_station_url']) && (mb_strlen($this->container['radio_station_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'radio_station_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['buy_this_url']) && (mb_strlen($this->container['buy_this_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'buy_this_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['isrc_number']) && (mb_strlen($this->container['isrc_number']) > 512)) {
            $invalidProperties[] = "invalid value for 'isrc_number', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['catalog_number']) && (mb_strlen($this->container['catalog_number']) > 512)) {
            $invalidProperties[] = "invalid value for 'catalog_number', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['original_artist']) && (mb_strlen($this->container['original_artist']) > 512)) {
            $invalidProperties[] = "invalid value for 'original_artist', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['copyright']) && (mb_strlen($this->container['copyright']) > 512)) {
            $invalidProperties[] = "invalid value for 'copyright', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['report_datetime']) && (mb_strlen($this->container['report_datetime']) > 32)) {
            $invalidProperties[] = "invalid value for 'report_datetime', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['report_location']) && (mb_strlen($this->container['report_location']) > 512)) {
            $invalidProperties[] = "invalid value for 'report_location', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['report_organization']) && (mb_strlen($this->container['report_organization']) > 512)) {
            $invalidProperties[] = "invalid value for 'report_organization', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 512)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['contributor']) && (mb_strlen($this->container['contributor']) > 512)) {
            $invalidProperties[] = "invalid value for 'contributor', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 512)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['replay_gain']) && !preg_match("/^-?\\d{0,6}(?:\\.\\d{0,2})?$/", $this->container['replay_gain'])) {
            $invalidProperties[] = "invalid value for 'replay_gain', must be conform to the pattern /^-?\\d{0,6}(?:\\.\\d{0,2})?$/.";
        }

        if (!is_null($this->container['filesize']) && ($this->container['filesize'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'filesize', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['filesize']) && ($this->container['filesize'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'filesize', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 512)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['artwork']) && (mb_strlen($this->container['artwork']) > 512)) {
            $invalidProperties[] = "invalid value for 'artwork', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['track_type']) && (mb_strlen($this->container['track_type']) > 16)) {
            $invalidProperties[] = "invalid value for 'track_type', the character length must be smaller than or equal to 16.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_url
     *
     * @return string|null
     */
    public function getItemUrl()
    {
        return $this->container['item_url'];
    }

    /**
     * Sets item_url
     *
     * @param string|null $item_url item_url
     *
     * @return self
     */
    public function setItemUrl($item_url)
    {
        $this->container['item_url'] = $item_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PatchedFile., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets mime
     *
     * @return string|null
     */
    public function getMime()
    {
        return $this->container['mime'];
    }

    /**
     * Sets mime
     *
     * @param string|null $mime mime
     *
     * @return self
     */
    public function setMime($mime)
    {
        if (!is_null($mime) && (mb_strlen($mime) > 255)) {
            throw new \InvalidArgumentException('invalid length for $mime when calling PatchedFile., must be smaller than or equal to 255.');
        }

        $this->container['mime'] = $mime;

        return $this;
    }

    /**
     * Gets ftype
     *
     * @return string|null
     */
    public function getFtype()
    {
        return $this->container['ftype'];
    }

    /**
     * Sets ftype
     *
     * @param string|null $ftype ftype
     *
     * @return self
     */
    public function setFtype($ftype)
    {
        if (!is_null($ftype) && (mb_strlen($ftype) > 128)) {
            throw new \InvalidArgumentException('invalid length for $ftype when calling PatchedFile., must be smaller than or equal to 128.');
        }

        $this->container['ftype'] = $ftype;

        return $this;
    }

    /**
     * Gets filepath
     *
     * @return string|null
     */
    public function getFilepath()
    {
        return $this->container['filepath'];
    }

    /**
     * Sets filepath
     *
     * @param string|null $filepath filepath
     *
     * @return self
     */
    public function setFilepath($filepath)
    {
        $this->container['filepath'] = $filepath;

        return $this;
    }

    /**
     * Gets import_status
     *
     * @return int|null
     */
    public function getImportStatus()
    {
        return $this->container['import_status'];
    }

    /**
     * Sets import_status
     *
     * @param int|null $import_status import_status
     *
     * @return self
     */
    public function setImportStatus($import_status)
    {

        if (!is_null($import_status) && ($import_status > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $import_status when calling PatchedFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($import_status) && ($import_status < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $import_status when calling PatchedFile., must be bigger than or equal to -2147483648.');
        }

        $this->container['import_status'] = $import_status;

        return $this;
    }

    /**
     * Gets currently_accessing
     *
     * @return int|null
     */
    public function getCurrentlyAccessing()
    {
        return $this->container['currently_accessing'];
    }

    /**
     * Sets currently_accessing
     *
     * @param int|null $currently_accessing currently_accessing
     *
     * @return self
     */
    public function setCurrentlyAccessing($currently_accessing)
    {

        if (!is_null($currently_accessing) && ($currently_accessing > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $currently_accessing when calling PatchedFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($currently_accessing) && ($currently_accessing < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $currently_accessing when calling PatchedFile., must be bigger than or equal to -2147483648.');
        }

        $this->container['currently_accessing'] = $currently_accessing;

        return $this;
    }

    /**
     * Gets mtime
     *
     * @return \DateTime|null
     */
    public function getMtime()
    {
        return $this->container['mtime'];
    }

    /**
     * Sets mtime
     *
     * @param \DateTime|null $mtime mtime
     *
     * @return self
     */
    public function setMtime($mtime)
    {
        $this->container['mtime'] = $mtime;

        return $this;
    }

    /**
     * Gets utime
     *
     * @return \DateTime|null
     */
    public function getUtime()
    {
        return $this->container['utime'];
    }

    /**
     * Sets utime
     *
     * @param \DateTime|null $utime utime
     *
     * @return self
     */
    public function setUtime($utime)
    {
        $this->container['utime'] = $utime;

        return $this;
    }

    /**
     * Gets lptime
     *
     * @return \DateTime|null
     */
    public function getLptime()
    {
        return $this->container['lptime'];
    }

    /**
     * Sets lptime
     *
     * @param \DateTime|null $lptime lptime
     *
     * @return self
     */
    public function setLptime($lptime)
    {
        $this->container['lptime'] = $lptime;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string|null
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string|null $md5 md5
     *
     * @return self
     */
    public function setMd5($md5)
    {
        if (!is_null($md5) && (mb_strlen($md5) > 32)) {
            throw new \InvalidArgumentException('invalid length for $md5 when calling PatchedFile., must be smaller than or equal to 32.');
        }

        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets track_title
     *
     * @return string|null
     */
    public function getTrackTitle()
    {
        return $this->container['track_title'];
    }

    /**
     * Sets track_title
     *
     * @param string|null $track_title track_title
     *
     * @return self
     */
    public function setTrackTitle($track_title)
    {
        if (!is_null($track_title) && (mb_strlen($track_title) > 512)) {
            throw new \InvalidArgumentException('invalid length for $track_title when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['track_title'] = $track_title;

        return $this;
    }

    /**
     * Gets artist_name
     *
     * @return string|null
     */
    public function getArtistName()
    {
        return $this->container['artist_name'];
    }

    /**
     * Sets artist_name
     *
     * @param string|null $artist_name artist_name
     *
     * @return self
     */
    public function setArtistName($artist_name)
    {
        if (!is_null($artist_name) && (mb_strlen($artist_name) > 512)) {
            throw new \InvalidArgumentException('invalid length for $artist_name when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['artist_name'] = $artist_name;

        return $this;
    }

    /**
     * Gets bit_rate
     *
     * @return int|null
     */
    public function getBitRate()
    {
        return $this->container['bit_rate'];
    }

    /**
     * Sets bit_rate
     *
     * @param int|null $bit_rate bit_rate
     *
     * @return self
     */
    public function setBitRate($bit_rate)
    {

        if (!is_null($bit_rate) && ($bit_rate > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $bit_rate when calling PatchedFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($bit_rate) && ($bit_rate < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $bit_rate when calling PatchedFile., must be bigger than or equal to -2147483648.');
        }

        $this->container['bit_rate'] = $bit_rate;

        return $this;
    }

    /**
     * Gets sample_rate
     *
     * @return int|null
     */
    public function getSampleRate()
    {
        return $this->container['sample_rate'];
    }

    /**
     * Sets sample_rate
     *
     * @param int|null $sample_rate sample_rate
     *
     * @return self
     */
    public function setSampleRate($sample_rate)
    {

        if (!is_null($sample_rate) && ($sample_rate > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $sample_rate when calling PatchedFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($sample_rate) && ($sample_rate < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $sample_rate when calling PatchedFile., must be bigger than or equal to -2147483648.');
        }

        $this->container['sample_rate'] = $sample_rate;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (!is_null($format) && (mb_strlen($format) > 128)) {
            throw new \InvalidArgumentException('invalid length for $format when calling PatchedFile., must be smaller than or equal to 128.');
        }

        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets length
     *
     * @return string|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param string|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets album_title
     *
     * @return string|null
     */
    public function getAlbumTitle()
    {
        return $this->container['album_title'];
    }

    /**
     * Sets album_title
     *
     * @param string|null $album_title album_title
     *
     * @return self
     */
    public function setAlbumTitle($album_title)
    {
        if (!is_null($album_title) && (mb_strlen($album_title) > 512)) {
            throw new \InvalidArgumentException('invalid length for $album_title when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['album_title'] = $album_title;

        return $this;
    }

    /**
     * Gets genre
     *
     * @return string|null
     */
    public function getGenre()
    {
        return $this->container['genre'];
    }

    /**
     * Sets genre
     *
     * @param string|null $genre genre
     *
     * @return self
     */
    public function setGenre($genre)
    {
        if (!is_null($genre) && (mb_strlen($genre) > 64)) {
            throw new \InvalidArgumentException('invalid length for $genre when calling PatchedFile., must be smaller than or equal to 64.');
        }

        $this->container['genre'] = $genre;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets year
     *
     * @return string|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param string|null $year year
     *
     * @return self
     */
    public function setYear($year)
    {
        if (!is_null($year) && (mb_strlen($year) > 16)) {
            throw new \InvalidArgumentException('invalid length for $year when calling PatchedFile., must be smaller than or equal to 16.');
        }

        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets track_number
     *
     * @return int|null
     */
    public function getTrackNumber()
    {
        return $this->container['track_number'];
    }

    /**
     * Sets track_number
     *
     * @param int|null $track_number track_number
     *
     * @return self
     */
    public function setTrackNumber($track_number)
    {

        if (!is_null($track_number) && ($track_number > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $track_number when calling PatchedFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($track_number) && ($track_number < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $track_number when calling PatchedFile., must be bigger than or equal to -2147483648.');
        }

        $this->container['track_number'] = $track_number;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return int|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param int|null $channels channels
     *
     * @return self
     */
    public function setChannels($channels)
    {

        if (!is_null($channels) && ($channels > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $channels when calling PatchedFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($channels) && ($channels < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $channels when calling PatchedFile., must be bigger than or equal to -2147483648.');
        }

        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $url when calling PatchedFile., must be smaller than or equal to 1024.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets bpm
     *
     * @return int|null
     */
    public function getBpm()
    {
        return $this->container['bpm'];
    }

    /**
     * Sets bpm
     *
     * @param int|null $bpm bpm
     *
     * @return self
     */
    public function setBpm($bpm)
    {

        if (!is_null($bpm) && ($bpm > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $bpm when calling PatchedFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($bpm) && ($bpm < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $bpm when calling PatchedFile., must be bigger than or equal to -2147483648.');
        }

        $this->container['bpm'] = $bpm;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return string|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param string|null $rating rating
     *
     * @return self
     */
    public function setRating($rating)
    {
        if (!is_null($rating) && (mb_strlen($rating) > 8)) {
            throw new \InvalidArgumentException('invalid length for $rating when calling PatchedFile., must be smaller than or equal to 8.');
        }

        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets encoded_by
     *
     * @return string|null
     */
    public function getEncodedBy()
    {
        return $this->container['encoded_by'];
    }

    /**
     * Sets encoded_by
     *
     * @param string|null $encoded_by encoded_by
     *
     * @return self
     */
    public function setEncodedBy($encoded_by)
    {
        if (!is_null($encoded_by) && (mb_strlen($encoded_by) > 255)) {
            throw new \InvalidArgumentException('invalid length for $encoded_by when calling PatchedFile., must be smaller than or equal to 255.');
        }

        $this->container['encoded_by'] = $encoded_by;

        return $this;
    }

    /**
     * Gets disc_number
     *
     * @return string|null
     */
    public function getDiscNumber()
    {
        return $this->container['disc_number'];
    }

    /**
     * Sets disc_number
     *
     * @param string|null $disc_number disc_number
     *
     * @return self
     */
    public function setDiscNumber($disc_number)
    {
        if (!is_null($disc_number) && (mb_strlen($disc_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $disc_number when calling PatchedFile., must be smaller than or equal to 8.');
        }

        $this->container['disc_number'] = $disc_number;

        return $this;
    }

    /**
     * Gets mood
     *
     * @return string|null
     */
    public function getMood()
    {
        return $this->container['mood'];
    }

    /**
     * Sets mood
     *
     * @param string|null $mood mood
     *
     * @return self
     */
    public function setMood($mood)
    {
        if (!is_null($mood) && (mb_strlen($mood) > 64)) {
            throw new \InvalidArgumentException('invalid length for $mood when calling PatchedFile., must be smaller than or equal to 64.');
        }

        $this->container['mood'] = $mood;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (!is_null($label) && (mb_strlen($label) > 512)) {
            throw new \InvalidArgumentException('invalid length for $label when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets composer
     *
     * @return string|null
     */
    public function getComposer()
    {
        return $this->container['composer'];
    }

    /**
     * Sets composer
     *
     * @param string|null $composer composer
     *
     * @return self
     */
    public function setComposer($composer)
    {
        if (!is_null($composer) && (mb_strlen($composer) > 512)) {
            throw new \InvalidArgumentException('invalid length for $composer when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['composer'] = $composer;

        return $this;
    }

    /**
     * Gets encoder
     *
     * @return string|null
     */
    public function getEncoder()
    {
        return $this->container['encoder'];
    }

    /**
     * Sets encoder
     *
     * @param string|null $encoder encoder
     *
     * @return self
     */
    public function setEncoder($encoder)
    {
        if (!is_null($encoder) && (mb_strlen($encoder) > 64)) {
            throw new \InvalidArgumentException('invalid length for $encoder when calling PatchedFile., must be smaller than or equal to 64.');
        }

        $this->container['encoder'] = $encoder;

        return $this;
    }

    /**
     * Gets checksum
     *
     * @return string|null
     */
    public function getChecksum()
    {
        return $this->container['checksum'];
    }

    /**
     * Sets checksum
     *
     * @param string|null $checksum checksum
     *
     * @return self
     */
    public function setChecksum($checksum)
    {
        if (!is_null($checksum) && (mb_strlen($checksum) > 256)) {
            throw new \InvalidArgumentException('invalid length for $checksum when calling PatchedFile., must be smaller than or equal to 256.');
        }

        $this->container['checksum'] = $checksum;

        return $this;
    }

    /**
     * Gets lyrics
     *
     * @return string|null
     */
    public function getLyrics()
    {
        return $this->container['lyrics'];
    }

    /**
     * Sets lyrics
     *
     * @param string|null $lyrics lyrics
     *
     * @return self
     */
    public function setLyrics($lyrics)
    {
        $this->container['lyrics'] = $lyrics;

        return $this;
    }

    /**
     * Gets orchestra
     *
     * @return string|null
     */
    public function getOrchestra()
    {
        return $this->container['orchestra'];
    }

    /**
     * Sets orchestra
     *
     * @param string|null $orchestra orchestra
     *
     * @return self
     */
    public function setOrchestra($orchestra)
    {
        if (!is_null($orchestra) && (mb_strlen($orchestra) > 512)) {
            throw new \InvalidArgumentException('invalid length for $orchestra when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['orchestra'] = $orchestra;

        return $this;
    }

    /**
     * Gets conductor
     *
     * @return string|null
     */
    public function getConductor()
    {
        return $this->container['conductor'];
    }

    /**
     * Sets conductor
     *
     * @param string|null $conductor conductor
     *
     * @return self
     */
    public function setConductor($conductor)
    {
        if (!is_null($conductor) && (mb_strlen($conductor) > 512)) {
            throw new \InvalidArgumentException('invalid length for $conductor when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['conductor'] = $conductor;

        return $this;
    }

    /**
     * Gets lyricist
     *
     * @return string|null
     */
    public function getLyricist()
    {
        return $this->container['lyricist'];
    }

    /**
     * Sets lyricist
     *
     * @param string|null $lyricist lyricist
     *
     * @return self
     */
    public function setLyricist($lyricist)
    {
        if (!is_null($lyricist) && (mb_strlen($lyricist) > 512)) {
            throw new \InvalidArgumentException('invalid length for $lyricist when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['lyricist'] = $lyricist;

        return $this;
    }

    /**
     * Gets original_lyricist
     *
     * @return string|null
     */
    public function getOriginalLyricist()
    {
        return $this->container['original_lyricist'];
    }

    /**
     * Sets original_lyricist
     *
     * @param string|null $original_lyricist original_lyricist
     *
     * @return self
     */
    public function setOriginalLyricist($original_lyricist)
    {
        if (!is_null($original_lyricist) && (mb_strlen($original_lyricist) > 512)) {
            throw new \InvalidArgumentException('invalid length for $original_lyricist when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['original_lyricist'] = $original_lyricist;

        return $this;
    }

    /**
     * Gets radio_station_name
     *
     * @return string|null
     */
    public function getRadioStationName()
    {
        return $this->container['radio_station_name'];
    }

    /**
     * Sets radio_station_name
     *
     * @param string|null $radio_station_name radio_station_name
     *
     * @return self
     */
    public function setRadioStationName($radio_station_name)
    {
        if (!is_null($radio_station_name) && (mb_strlen($radio_station_name) > 512)) {
            throw new \InvalidArgumentException('invalid length for $radio_station_name when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['radio_station_name'] = $radio_station_name;

        return $this;
    }

    /**
     * Gets info_url
     *
     * @return string|null
     */
    public function getInfoUrl()
    {
        return $this->container['info_url'];
    }

    /**
     * Sets info_url
     *
     * @param string|null $info_url info_url
     *
     * @return self
     */
    public function setInfoUrl($info_url)
    {
        if (!is_null($info_url) && (mb_strlen($info_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $info_url when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['info_url'] = $info_url;

        return $this;
    }

    /**
     * Gets artist_url
     *
     * @return string|null
     */
    public function getArtistUrl()
    {
        return $this->container['artist_url'];
    }

    /**
     * Sets artist_url
     *
     * @param string|null $artist_url artist_url
     *
     * @return self
     */
    public function setArtistUrl($artist_url)
    {
        if (!is_null($artist_url) && (mb_strlen($artist_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $artist_url when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['artist_url'] = $artist_url;

        return $this;
    }

    /**
     * Gets audio_source_url
     *
     * @return string|null
     */
    public function getAudioSourceUrl()
    {
        return $this->container['audio_source_url'];
    }

    /**
     * Sets audio_source_url
     *
     * @param string|null $audio_source_url audio_source_url
     *
     * @return self
     */
    public function setAudioSourceUrl($audio_source_url)
    {
        if (!is_null($audio_source_url) && (mb_strlen($audio_source_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $audio_source_url when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['audio_source_url'] = $audio_source_url;

        return $this;
    }

    /**
     * Gets radio_station_url
     *
     * @return string|null
     */
    public function getRadioStationUrl()
    {
        return $this->container['radio_station_url'];
    }

    /**
     * Sets radio_station_url
     *
     * @param string|null $radio_station_url radio_station_url
     *
     * @return self
     */
    public function setRadioStationUrl($radio_station_url)
    {
        if (!is_null($radio_station_url) && (mb_strlen($radio_station_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $radio_station_url when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['radio_station_url'] = $radio_station_url;

        return $this;
    }

    /**
     * Gets buy_this_url
     *
     * @return string|null
     */
    public function getBuyThisUrl()
    {
        return $this->container['buy_this_url'];
    }

    /**
     * Sets buy_this_url
     *
     * @param string|null $buy_this_url buy_this_url
     *
     * @return self
     */
    public function setBuyThisUrl($buy_this_url)
    {
        if (!is_null($buy_this_url) && (mb_strlen($buy_this_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $buy_this_url when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['buy_this_url'] = $buy_this_url;

        return $this;
    }

    /**
     * Gets isrc_number
     *
     * @return string|null
     */
    public function getIsrcNumber()
    {
        return $this->container['isrc_number'];
    }

    /**
     * Sets isrc_number
     *
     * @param string|null $isrc_number isrc_number
     *
     * @return self
     */
    public function setIsrcNumber($isrc_number)
    {
        if (!is_null($isrc_number) && (mb_strlen($isrc_number) > 512)) {
            throw new \InvalidArgumentException('invalid length for $isrc_number when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['isrc_number'] = $isrc_number;

        return $this;
    }

    /**
     * Gets catalog_number
     *
     * @return string|null
     */
    public function getCatalogNumber()
    {
        return $this->container['catalog_number'];
    }

    /**
     * Sets catalog_number
     *
     * @param string|null $catalog_number catalog_number
     *
     * @return self
     */
    public function setCatalogNumber($catalog_number)
    {
        if (!is_null($catalog_number) && (mb_strlen($catalog_number) > 512)) {
            throw new \InvalidArgumentException('invalid length for $catalog_number when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['catalog_number'] = $catalog_number;

        return $this;
    }

    /**
     * Gets original_artist
     *
     * @return string|null
     */
    public function getOriginalArtist()
    {
        return $this->container['original_artist'];
    }

    /**
     * Sets original_artist
     *
     * @param string|null $original_artist original_artist
     *
     * @return self
     */
    public function setOriginalArtist($original_artist)
    {
        if (!is_null($original_artist) && (mb_strlen($original_artist) > 512)) {
            throw new \InvalidArgumentException('invalid length for $original_artist when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['original_artist'] = $original_artist;

        return $this;
    }

    /**
     * Gets copyright
     *
     * @return string|null
     */
    public function getCopyright()
    {
        return $this->container['copyright'];
    }

    /**
     * Sets copyright
     *
     * @param string|null $copyright copyright
     *
     * @return self
     */
    public function setCopyright($copyright)
    {
        if (!is_null($copyright) && (mb_strlen($copyright) > 512)) {
            throw new \InvalidArgumentException('invalid length for $copyright when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['copyright'] = $copyright;

        return $this;
    }

    /**
     * Gets report_datetime
     *
     * @return string|null
     */
    public function getReportDatetime()
    {
        return $this->container['report_datetime'];
    }

    /**
     * Sets report_datetime
     *
     * @param string|null $report_datetime report_datetime
     *
     * @return self
     */
    public function setReportDatetime($report_datetime)
    {
        if (!is_null($report_datetime) && (mb_strlen($report_datetime) > 32)) {
            throw new \InvalidArgumentException('invalid length for $report_datetime when calling PatchedFile., must be smaller than or equal to 32.');
        }

        $this->container['report_datetime'] = $report_datetime;

        return $this;
    }

    /**
     * Gets report_location
     *
     * @return string|null
     */
    public function getReportLocation()
    {
        return $this->container['report_location'];
    }

    /**
     * Sets report_location
     *
     * @param string|null $report_location report_location
     *
     * @return self
     */
    public function setReportLocation($report_location)
    {
        if (!is_null($report_location) && (mb_strlen($report_location) > 512)) {
            throw new \InvalidArgumentException('invalid length for $report_location when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['report_location'] = $report_location;

        return $this;
    }

    /**
     * Gets report_organization
     *
     * @return string|null
     */
    public function getReportOrganization()
    {
        return $this->container['report_organization'];
    }

    /**
     * Sets report_organization
     *
     * @param string|null $report_organization report_organization
     *
     * @return self
     */
    public function setReportOrganization($report_organization)
    {
        if (!is_null($report_organization) && (mb_strlen($report_organization) > 512)) {
            throw new \InvalidArgumentException('invalid length for $report_organization when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['report_organization'] = $report_organization;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (!is_null($subject) && (mb_strlen($subject) > 512)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets contributor
     *
     * @return string|null
     */
    public function getContributor()
    {
        return $this->container['contributor'];
    }

    /**
     * Sets contributor
     *
     * @param string|null $contributor contributor
     *
     * @return self
     */
    public function setContributor($contributor)
    {
        if (!is_null($contributor) && (mb_strlen($contributor) > 512)) {
            throw new \InvalidArgumentException('invalid length for $contributor when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['contributor'] = $contributor;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (!is_null($language) && (mb_strlen($language) > 512)) {
            throw new \InvalidArgumentException('invalid length for $language when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets file_exists
     *
     * @return bool|null
     */
    public function getFileExists()
    {
        return $this->container['file_exists'];
    }

    /**
     * Sets file_exists
     *
     * @param bool|null $file_exists file_exists
     *
     * @return self
     */
    public function setFileExists($file_exists)
    {
        $this->container['file_exists'] = $file_exists;

        return $this;
    }

    /**
     * Gets replay_gain
     *
     * @return float|null
     */
    public function getReplayGain()
    {
        return $this->container['replay_gain'];
    }

    /**
     * Sets replay_gain
     *
     * @param float|null $replay_gain replay_gain
     *
     * @return self
     */
    public function setReplayGain($replay_gain)
    {

        if (!is_null($replay_gain) && (!preg_match("/^-?\\d{0,6}(?:\\.\\d{0,2})?$/", $replay_gain))) {
            throw new \InvalidArgumentException("invalid value for $replay_gain when calling PatchedFile., must conform to the pattern /^-?\\d{0,6}(?:\\.\\d{0,2})?$/.");
        }

        $this->container['replay_gain'] = $replay_gain;

        return $this;
    }

    /**
     * Gets cuein
     *
     * @return string|null
     */
    public function getCuein()
    {
        return $this->container['cuein'];
    }

    /**
     * Sets cuein
     *
     * @param string|null $cuein cuein
     *
     * @return self
     */
    public function setCuein($cuein)
    {
        $this->container['cuein'] = $cuein;

        return $this;
    }

    /**
     * Gets cueout
     *
     * @return string|null
     */
    public function getCueout()
    {
        return $this->container['cueout'];
    }

    /**
     * Sets cueout
     *
     * @param string|null $cueout cueout
     *
     * @return self
     */
    public function setCueout($cueout)
    {
        $this->container['cueout'] = $cueout;

        return $this;
    }

    /**
     * Gets silan_check
     *
     * @return bool|null
     */
    public function getSilanCheck()
    {
        return $this->container['silan_check'];
    }

    /**
     * Sets silan_check
     *
     * @param bool|null $silan_check silan_check
     *
     * @return self
     */
    public function setSilanCheck($silan_check)
    {
        $this->container['silan_check'] = $silan_check;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets is_scheduled
     *
     * @return bool|null
     */
    public function getIsScheduled()
    {
        return $this->container['is_scheduled'];
    }

    /**
     * Sets is_scheduled
     *
     * @param bool|null $is_scheduled is_scheduled
     *
     * @return self
     */
    public function setIsScheduled($is_scheduled)
    {
        $this->container['is_scheduled'] = $is_scheduled;

        return $this;
    }

    /**
     * Gets is_playlist
     *
     * @return bool|null
     */
    public function getIsPlaylist()
    {
        return $this->container['is_playlist'];
    }

    /**
     * Sets is_playlist
     *
     * @param bool|null $is_playlist is_playlist
     *
     * @return self
     */
    public function setIsPlaylist($is_playlist)
    {
        $this->container['is_playlist'] = $is_playlist;

        return $this;
    }

    /**
     * Gets filesize
     *
     * @return int|null
     */
    public function getFilesize()
    {
        return $this->container['filesize'];
    }

    /**
     * Sets filesize
     *
     * @param int|null $filesize filesize
     *
     * @return self
     */
    public function setFilesize($filesize)
    {

        if (!is_null($filesize) && ($filesize > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $filesize when calling PatchedFile., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($filesize) && ($filesize < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $filesize when calling PatchedFile., must be bigger than or equal to -2147483648.');
        }

        $this->container['filesize'] = $filesize;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 512)) {
            throw new \InvalidArgumentException('invalid length for $description when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets artwork
     *
     * @return string|null
     */
    public function getArtwork()
    {
        return $this->container['artwork'];
    }

    /**
     * Sets artwork
     *
     * @param string|null $artwork artwork
     *
     * @return self
     */
    public function setArtwork($artwork)
    {
        if (!is_null($artwork) && (mb_strlen($artwork) > 512)) {
            throw new \InvalidArgumentException('invalid length for $artwork when calling PatchedFile., must be smaller than or equal to 512.');
        }

        $this->container['artwork'] = $artwork;

        return $this;
    }

    /**
     * Gets track_type
     *
     * @return string|null
     */
    public function getTrackType()
    {
        return $this->container['track_type'];
    }

    /**
     * Sets track_type
     *
     * @param string|null $track_type track_type
     *
     * @return self
     */
    public function setTrackType($track_type)
    {
        if (!is_null($track_type) && (mb_strlen($track_type) > 16)) {
            throw new \InvalidArgumentException('invalid length for $track_type when calling PatchedFile., must be smaller than or equal to 16.');
        }

        $this->container['track_type'] = $track_type;

        return $this;
    }

    /**
     * Gets directory
     *
     * @return string|null
     */
    public function getDirectory()
    {
        return $this->container['directory'];
    }

    /**
     * Sets directory
     *
     * @param string|null $directory directory
     *
     * @return self
     */
    public function setDirectory($directory)
    {
        $this->container['directory'] = $directory;

        return $this;
    }

    /**
     * Gets edited_by
     *
     * @return string|null
     */
    public function getEditedBy()
    {
        return $this->container['edited_by'];
    }

    /**
     * Sets edited_by
     *
     * @param string|null $edited_by edited_by
     *
     * @return self
     */
    public function setEditedBy($edited_by)
    {
        $this->container['edited_by'] = $edited_by;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * ImportedPodcast
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LibreTime API
 *
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-beta
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Libretime\Client\Model;

use \ArrayAccess;
use \Libretime\Client\ObjectSerializer;

/**
 * ImportedPodcast Class Doc Comment
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ImportedPodcast implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImportedPodcast';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_url' => 'string',
        'auto_ingest' => 'bool',
        'auto_ingest_timestamp' => '\DateTime',
        'album_override' => 'bool',
        'podcast' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_url' => 'uri',
        'auto_ingest' => null,
        'auto_ingest_timestamp' => 'date-time',
        'album_override' => null,
        'podcast' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_url' => 'item_url',
        'auto_ingest' => 'auto_ingest',
        'auto_ingest_timestamp' => 'auto_ingest_timestamp',
        'album_override' => 'album_override',
        'podcast' => 'podcast'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_url' => 'setItemUrl',
        'auto_ingest' => 'setAutoIngest',
        'auto_ingest_timestamp' => 'setAutoIngestTimestamp',
        'album_override' => 'setAlbumOverride',
        'podcast' => 'setPodcast'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_url' => 'getItemUrl',
        'auto_ingest' => 'getAutoIngest',
        'auto_ingest_timestamp' => 'getAutoIngestTimestamp',
        'album_override' => 'getAlbumOverride',
        'podcast' => 'getPodcast'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_url'] = $data['item_url'] ?? null;
        $this->container['auto_ingest'] = $data['auto_ingest'] ?? null;
        $this->container['auto_ingest_timestamp'] = $data['auto_ingest_timestamp'] ?? null;
        $this->container['album_override'] = $data['album_override'] ?? null;
        $this->container['podcast'] = $data['podcast'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['item_url'] === null) {
            $invalidProperties[] = "'item_url' can't be null";
        }
        if ($this->container['auto_ingest'] === null) {
            $invalidProperties[] = "'auto_ingest' can't be null";
        }
        if ($this->container['album_override'] === null) {
            $invalidProperties[] = "'album_override' can't be null";
        }
        if ($this->container['podcast'] === null) {
            $invalidProperties[] = "'podcast' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_url
     *
     * @return string
     */
    public function getItemUrl()
    {
        return $this->container['item_url'];
    }

    /**
     * Sets item_url
     *
     * @param string $item_url item_url
     *
     * @return self
     */
    public function setItemUrl($item_url)
    {
        $this->container['item_url'] = $item_url;

        return $this;
    }

    /**
     * Gets auto_ingest
     *
     * @return bool
     */
    public function getAutoIngest()
    {
        return $this->container['auto_ingest'];
    }

    /**
     * Sets auto_ingest
     *
     * @param bool $auto_ingest auto_ingest
     *
     * @return self
     */
    public function setAutoIngest($auto_ingest)
    {
        $this->container['auto_ingest'] = $auto_ingest;

        return $this;
    }

    /**
     * Gets auto_ingest_timestamp
     *
     * @return \DateTime|null
     */
    public function getAutoIngestTimestamp()
    {
        return $this->container['auto_ingest_timestamp'];
    }

    /**
     * Sets auto_ingest_timestamp
     *
     * @param \DateTime|null $auto_ingest_timestamp auto_ingest_timestamp
     *
     * @return self
     */
    public function setAutoIngestTimestamp($auto_ingest_timestamp)
    {
        $this->container['auto_ingest_timestamp'] = $auto_ingest_timestamp;

        return $this;
    }

    /**
     * Gets album_override
     *
     * @return bool
     */
    public function getAlbumOverride()
    {
        return $this->container['album_override'];
    }

    /**
     * Sets album_override
     *
     * @param bool $album_override album_override
     *
     * @return self
     */
    public function setAlbumOverride($album_override)
    {
        $this->container['album_override'] = $album_override;

        return $this;
    }

    /**
     * Gets podcast
     *
     * @return string
     */
    public function getPodcast()
    {
        return $this->container['podcast'];
    }

    /**
     * Sets podcast
     *
     * @param string $podcast podcast
     *
     * @return self
     */
    public function setPodcast($podcast)
    {
        $this->container['podcast'] = $podcast;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from libretime_client.models.patched_file import PatchedFile  # noqa: E501

class TestPatchedFile(unittest.TestCase):
    """PatchedFile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PatchedFile:
        """Test PatchedFile
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PatchedFile`
        """
        model = PatchedFile()  # noqa: E501
        if include_optional:
            return PatchedFile(
                id = 56,
                import_status = 0,
                filepath = '',
                size = -2147483648,
                exists = True,
                mime = '',
                md5 = '',
                hidden = True,
                accessed = -2147483648,
                scheduled = True,
                part_of_list = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_played_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                bit_rate = -2147483648,
                sample_rate = -2147483648,
                format = '',
                channels = -2147483648,
                length = '',
                bpm = -2147483648,
                replay_gain = '-807',
                cue_in = '',
                cue_out = '',
                name = '',
                description = '',
                artwork = '',
                artist_name = '',
                artist_url = '',
                original_artist = '',
                album_title = '',
                track_title = '',
                genre = '',
                mood = '',
                var_date = '',
                track_number = -2147483648,
                disc_number = '',
                comment = '',
                language = '',
                label = '',
                copyright = '',
                composer = '',
                conductor = '',
                orchestra = '',
                encoder = '',
                encoded_by = '',
                isrc = '',
                lyrics = '',
                lyricist = '',
                original_lyricist = '',
                subject = '',
                contributor = '',
                rating = '',
                url = '',
                info_url = '',
                audio_source_url = '',
                buy_this_url = '',
                catalog_number = '',
                radio_station_name = '',
                radio_station_url = '',
                report_datetime = '',
                report_location = '',
                report_organization = '',
                library = 56,
                owner = 56,
                edited_by = 56
            )
        else:
            return PatchedFile(
        )
        """

    def testPatchedFile(self):
        """Test PatchedFile"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

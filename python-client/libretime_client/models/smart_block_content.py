# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint

class SmartBlockContent(BaseModel):
    """
    SmartBlockContent
    """
    id: StrictInt = Field(...)
    position: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    offset: Union[StrictFloat, StrictInt] = Field(...)
    length: Optional[StrictStr] = None
    cue_in: Optional[StrictStr] = None
    cue_out: Optional[StrictStr] = None
    fade_in: Optional[StrictStr] = None
    fade_out: Optional[StrictStr] = None
    block: Optional[StrictInt] = None
    file: Optional[StrictInt] = None
    __properties = ["id", "position", "offset", "length", "cue_in", "cue_out", "fade_in", "fade_out", "block", "file"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmartBlockContent:
        """Create an instance of SmartBlockContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # set to None if position (nullable) is None
        # and __fields_set__ contains the field
        if self.position is None and "position" in self.__fields_set__:
            _dict['position'] = None

        # set to None if length (nullable) is None
        # and __fields_set__ contains the field
        if self.length is None and "length" in self.__fields_set__:
            _dict['length'] = None

        # set to None if cue_in (nullable) is None
        # and __fields_set__ contains the field
        if self.cue_in is None and "cue_in" in self.__fields_set__:
            _dict['cue_in'] = None

        # set to None if cue_out (nullable) is None
        # and __fields_set__ contains the field
        if self.cue_out is None and "cue_out" in self.__fields_set__:
            _dict['cue_out'] = None

        # set to None if fade_in (nullable) is None
        # and __fields_set__ contains the field
        if self.fade_in is None and "fade_in" in self.__fields_set__:
            _dict['fade_in'] = None

        # set to None if fade_out (nullable) is None
        # and __fields_set__ contains the field
        if self.fade_out is None and "fade_out" in self.__fields_set__:
            _dict['fade_out'] = None

        # set to None if block (nullable) is None
        # and __fields_set__ contains the field
        if self.block is None and "block" in self.__fields_set__:
            _dict['block'] = None

        # set to None if file (nullable) is None
        # and __fields_set__ contains the field
        if self.file is None and "file" in self.__fields_set__:
            _dict['file'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmartBlockContent:
        """Create an instance of SmartBlockContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SmartBlockContent.parse_obj(obj)

        _obj = SmartBlockContent.parse_obj({
            "id": obj.get("id"),
            "position": obj.get("position"),
            "offset": obj.get("offset"),
            "length": obj.get("length"),
            "cue_in": obj.get("cue_in"),
            "cue_out": obj.get("cue_out"),
            "fade_in": obj.get("fade_in"),
            "fade_out": obj.get("fade_out"),
            "block": obj.get("block"),
            "file": obj.get("file")
        })
        return _obj



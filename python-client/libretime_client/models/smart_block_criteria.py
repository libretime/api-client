# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, conint, constr

class SmartBlockCriteria(BaseModel):
    """
    SmartBlockCriteria
    """
    id: StrictInt = Field(...)
    group: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    criteria: constr(strict=True, max_length=32) = Field(...)
    condition: constr(strict=True, max_length=16) = Field(...)
    value: constr(strict=True, max_length=512) = Field(...)
    extra: Optional[constr(strict=True, max_length=512)] = None
    block: StrictInt = Field(...)
    __properties = ["id", "group", "criteria", "condition", "value", "extra", "block"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmartBlockCriteria:
        """Create an instance of SmartBlockCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # set to None if group (nullable) is None
        # and __fields_set__ contains the field
        if self.group is None and "group" in self.__fields_set__:
            _dict['group'] = None

        # set to None if extra (nullable) is None
        # and __fields_set__ contains the field
        if self.extra is None and "extra" in self.__fields_set__:
            _dict['extra'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmartBlockCriteria:
        """Create an instance of SmartBlockCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SmartBlockCriteria.parse_obj(obj)

        _obj = SmartBlockCriteria.parse_obj({
            "id": obj.get("id"),
            "group": obj.get("group"),
            "criteria": obj.get("criteria"),
            "condition": obj.get("condition"),
            "value": obj.get("value"),
            "extra": obj.get("extra"),
            "block": obj.get("block")
        })
        return _obj



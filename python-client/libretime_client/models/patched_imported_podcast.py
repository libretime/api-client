# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt

class PatchedImportedPodcast(BaseModel):
    """
    PatchedImportedPodcast
    """
    id: Optional[StrictInt] = None
    override_album: Optional[StrictBool] = None
    auto_ingest: Optional[StrictBool] = None
    auto_ingested_at: Optional[datetime] = None
    podcast: Optional[StrictInt] = None
    __properties = ["id", "override_album", "auto_ingest", "auto_ingested_at", "podcast"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedImportedPodcast:
        """Create an instance of PatchedImportedPodcast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # set to None if auto_ingested_at (nullable) is None
        # and __fields_set__ contains the field
        if self.auto_ingested_at is None and "auto_ingested_at" in self.__fields_set__:
            _dict['auto_ingested_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedImportedPodcast:
        """Create an instance of PatchedImportedPodcast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedImportedPodcast.parse_obj(obj)

        _obj = PatchedImportedPodcast.parse_obj({
            "id": obj.get("id"),
            "override_album": obj.get("override_album"),
            "auto_ingest": obj.get("auto_ingest"),
            "auto_ingested_at": obj.get("auto_ingested_at"),
            "podcast": obj.get("podcast")
        })
        return _obj



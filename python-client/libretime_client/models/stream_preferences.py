# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class StreamPreferences(BaseModel):
    """
    StreamPreferences
    """
    input_fade_transition: Union[StrictFloat, StrictInt] = Field(...)
    message_format: StrictInt = Field(...)
    message_offline: StrictStr = Field(...)
    __properties = ["input_fade_transition", "message_format", "message_offline"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StreamPreferences:
        """Create an instance of StreamPreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "input_fade_transition",
                            "message_format",
                            "message_offline",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StreamPreferences:
        """Create an instance of StreamPreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StreamPreferences.parse_obj(obj)

        _obj = StreamPreferences.parse_obj({
            "input_fade_transition": obj.get("input_fade_transition"),
            "message_format": obj.get("message_format"),
            "message_offline": obj.get("message_offline")
        })
        return _obj



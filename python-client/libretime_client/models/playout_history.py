# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class PlayoutHistory(BaseModel):
    """
    PlayoutHistory
    """
    id: StrictInt = Field(...)
    starts: datetime = Field(...)
    ends: Optional[datetime] = None
    file: Optional[StrictInt] = None
    instance: Optional[StrictInt] = None
    __properties = ["id", "starts", "ends", "file", "instance"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlayoutHistory:
        """Create an instance of PlayoutHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # set to None if ends (nullable) is None
        # and __fields_set__ contains the field
        if self.ends is None and "ends" in self.__fields_set__:
            _dict['ends'] = None

        # set to None if file (nullable) is None
        # and __fields_set__ contains the field
        if self.file is None and "file" in self.__fields_set__:
            _dict['file'] = None

        # set to None if instance (nullable) is None
        # and __fields_set__ contains the field
        if self.instance is None and "instance" in self.__fields_set__:
            _dict['instance'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlayoutHistory:
        """Create an instance of PlayoutHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlayoutHistory.parse_obj(obj)

        _obj = PlayoutHistory.parse_obj({
            "id": obj.get("id"),
            "starts": obj.get("starts"),
            "ends": obj.get("ends"),
            "file": obj.get("file"),
            "instance": obj.get("instance")
        })
        return _obj



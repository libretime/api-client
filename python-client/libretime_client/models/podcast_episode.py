# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr

class PodcastEpisode(BaseModel):
    """
    PodcastEpisode
    """
    id: StrictInt = Field(...)
    published_at: datetime = Field(...)
    download_url: constr(strict=True, max_length=4096) = Field(...)
    episode_guid: constr(strict=True, max_length=4096) = Field(...)
    episode_title: constr(strict=True, max_length=4096) = Field(...)
    episode_description: StrictStr = Field(...)
    podcast: StrictInt = Field(...)
    file: Optional[StrictInt] = None
    __properties = ["id", "published_at", "download_url", "episode_guid", "episode_title", "episode_description", "podcast", "file"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PodcastEpisode:
        """Create an instance of PodcastEpisode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # set to None if file (nullable) is None
        # and __fields_set__ contains the field
        if self.file is None and "file" in self.__fields_set__:
            _dict['file'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PodcastEpisode:
        """Create an instance of PodcastEpisode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PodcastEpisode.parse_obj(obj)

        _obj = PodcastEpisode.parse_obj({
            "id": obj.get("id"),
            "published_at": obj.get("published_at"),
            "download_url": obj.get("download_url"),
            "episode_guid": obj.get("episode_guid"),
            "episode_title": obj.get("episode_title"),
            "episode_description": obj.get("episode_description"),
            "podcast": obj.get("podcast"),
            "file": obj.get("file")
        })
        return _obj



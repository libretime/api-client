# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, constr

class Show(BaseModel):
    """
    Show
    """
    id: StrictInt = Field(...)
    name: constr(strict=True, max_length=255) = Field(...)
    description: Optional[constr(strict=True, max_length=8192)] = None
    genre: Optional[constr(strict=True, max_length=255)] = None
    url: Optional[constr(strict=True, max_length=255)] = None
    image: Optional[constr(strict=True, max_length=255)] = None
    foreground_color: Optional[constr(strict=True, max_length=6)] = None
    background_color: Optional[constr(strict=True, max_length=6)] = None
    live_enabled: StrictBool = Field(...)
    linked: StrictBool = Field(...)
    linkable: StrictBool = Field(...)
    auto_playlist: Optional[StrictInt] = None
    auto_playlist_enabled: StrictBool = Field(...)
    auto_playlist_repeat: StrictBool = Field(...)
    __properties = ["id", "name", "description", "genre", "url", "image", "foreground_color", "background_color", "live_enabled", "linked", "linkable", "auto_playlist", "auto_playlist_enabled", "auto_playlist_repeat"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Show:
        """Create an instance of Show from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "live_enabled",
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if genre (nullable) is None
        # and __fields_set__ contains the field
        if self.genre is None and "genre" in self.__fields_set__:
            _dict['genre'] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        # set to None if image (nullable) is None
        # and __fields_set__ contains the field
        if self.image is None and "image" in self.__fields_set__:
            _dict['image'] = None

        # set to None if foreground_color (nullable) is None
        # and __fields_set__ contains the field
        if self.foreground_color is None and "foreground_color" in self.__fields_set__:
            _dict['foreground_color'] = None

        # set to None if background_color (nullable) is None
        # and __fields_set__ contains the field
        if self.background_color is None and "background_color" in self.__fields_set__:
            _dict['background_color'] = None

        # set to None if auto_playlist (nullable) is None
        # and __fields_set__ contains the field
        if self.auto_playlist is None and "auto_playlist" in self.__fields_set__:
            _dict['auto_playlist'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Show:
        """Create an instance of Show from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Show.parse_obj(obj)

        _obj = Show.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "genre": obj.get("genre"),
            "url": obj.get("url"),
            "image": obj.get("image"),
            "foreground_color": obj.get("foreground_color"),
            "background_color": obj.get("background_color"),
            "live_enabled": obj.get("live_enabled"),
            "linked": obj.get("linked"),
            "linkable": obj.get("linkable"),
            "auto_playlist": obj.get("auto_playlist"),
            "auto_playlist_enabled": obj.get("auto_playlist_enabled"),
            "auto_playlist_repeat": obj.get("auto_playlist_repeat")
        })
        return _obj



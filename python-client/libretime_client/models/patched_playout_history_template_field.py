# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, conint, constr

class PatchedPlayoutHistoryTemplateField(BaseModel):
    """
    PatchedPlayoutHistoryTemplateField
    """
    id: Optional[StrictInt] = None
    name: Optional[constr(strict=True, max_length=128)] = None
    label: Optional[constr(strict=True, max_length=128)] = None
    type: Optional[constr(strict=True, max_length=128)] = None
    is_file_md: Optional[StrictBool] = None
    position: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    template: Optional[StrictInt] = None
    __properties = ["id", "name", "label", "type", "is_file_md", "position", "template"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedPlayoutHistoryTemplateField:
        """Create an instance of PatchedPlayoutHistoryTemplateField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedPlayoutHistoryTemplateField:
        """Create an instance of PatchedPlayoutHistoryTemplateField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedPlayoutHistoryTemplateField.parse_obj(obj)

        _obj = PatchedPlayoutHistoryTemplateField.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "type": obj.get("type"),
            "is_file_md": obj.get("is_file_md"),
            "position": obj.get("position"),
            "template": obj.get("template")
        })
        return _obj



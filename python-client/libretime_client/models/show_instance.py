# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from libretime_client.models.record_enabled_enum import RecordEnabledEnum
from typing import Optional, Set
from typing_extensions import Self

class ShowInstance(BaseModel):
    """
    ShowInstance
    """ # noqa: E501
    id: StrictInt
    created_at: datetime
    starts_at: datetime
    ends_at: datetime
    filled_time: Optional[StrictStr] = None
    last_scheduled_at: Optional[datetime] = None
    description: Optional[Annotated[str, Field(strict=True, max_length=8192)]] = None
    modified: StrictBool
    rebroadcast: Optional[Annotated[int, Field(le=32767, strict=True, ge=-32768)]] = None
    auto_playlist_built: StrictBool
    record_enabled: Optional[RecordEnabledEnum] = None
    show: StrictInt
    instance: Optional[StrictInt] = None
    record_file: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "starts_at", "ends_at", "filled_time", "last_scheduled_at", "description", "modified", "rebroadcast", "auto_playlist_built", "record_enabled", "show", "instance", "record_file"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShowInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if filled_time (nullable) is None
        # and model_fields_set contains the field
        if self.filled_time is None and "filled_time" in self.model_fields_set:
            _dict['filled_time'] = None

        # set to None if last_scheduled_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_scheduled_at is None and "last_scheduled_at" in self.model_fields_set:
            _dict['last_scheduled_at'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if rebroadcast (nullable) is None
        # and model_fields_set contains the field
        if self.rebroadcast is None and "rebroadcast" in self.model_fields_set:
            _dict['rebroadcast'] = None

        # set to None if record_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.record_enabled is None and "record_enabled" in self.model_fields_set:
            _dict['record_enabled'] = None

        # set to None if instance (nullable) is None
        # and model_fields_set contains the field
        if self.instance is None and "instance" in self.model_fields_set:
            _dict['instance'] = None

        # set to None if record_file (nullable) is None
        # and model_fields_set contains the field
        if self.record_file is None and "record_file" in self.model_fields_set:
            _dict['record_file'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShowInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "starts_at": obj.get("starts_at"),
            "ends_at": obj.get("ends_at"),
            "filled_time": obj.get("filled_time"),
            "last_scheduled_at": obj.get("last_scheduled_at"),
            "description": obj.get("description"),
            "modified": obj.get("modified"),
            "rebroadcast": obj.get("rebroadcast"),
            "auto_playlist_built": obj.get("auto_playlist_built"),
            "record_enabled": obj.get("record_enabled"),
            "show": obj.get("show"),
            "instance": obj.get("instance"),
            "record_file": obj.get("record_file")
        })
        return _obj



# coding: utf-8

"""
    LibreTime API

    Radio Broadcast & Automation Platform

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr

class Podcast(BaseModel):
    """
    Podcast
    """
    id: StrictInt = Field(...)
    url: constr(strict=True, max_length=4096) = Field(...)
    title: constr(strict=True, max_length=4096) = Field(...)
    creator: Optional[constr(strict=True, max_length=4096)] = None
    description: Optional[constr(strict=True, max_length=4096)] = None
    language: Optional[constr(strict=True, max_length=4096)] = None
    copyright: Optional[constr(strict=True, max_length=4096)] = None
    link: Optional[constr(strict=True, max_length=4096)] = None
    itunes_author: Optional[constr(strict=True, max_length=4096)] = None
    itunes_keywords: Optional[constr(strict=True, max_length=4096)] = None
    itunes_summary: Optional[constr(strict=True, max_length=4096)] = None
    itunes_subtitle: Optional[constr(strict=True, max_length=4096)] = None
    itunes_category: Optional[constr(strict=True, max_length=4096)] = None
    itunes_explicit: Optional[constr(strict=True, max_length=4096)] = None
    owner: Optional[StrictInt] = None
    __properties = ["id", "url", "title", "creator", "description", "language", "copyright", "link", "itunes_author", "itunes_keywords", "itunes_summary", "itunes_subtitle", "itunes_category", "itunes_explicit", "owner"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Podcast:
        """Create an instance of Podcast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # set to None if creator (nullable) is None
        # and __fields_set__ contains the field
        if self.creator is None and "creator" in self.__fields_set__:
            _dict['creator'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if language (nullable) is None
        # and __fields_set__ contains the field
        if self.language is None and "language" in self.__fields_set__:
            _dict['language'] = None

        # set to None if copyright (nullable) is None
        # and __fields_set__ contains the field
        if self.copyright is None and "copyright" in self.__fields_set__:
            _dict['copyright'] = None

        # set to None if link (nullable) is None
        # and __fields_set__ contains the field
        if self.link is None and "link" in self.__fields_set__:
            _dict['link'] = None

        # set to None if itunes_author (nullable) is None
        # and __fields_set__ contains the field
        if self.itunes_author is None and "itunes_author" in self.__fields_set__:
            _dict['itunes_author'] = None

        # set to None if itunes_keywords (nullable) is None
        # and __fields_set__ contains the field
        if self.itunes_keywords is None and "itunes_keywords" in self.__fields_set__:
            _dict['itunes_keywords'] = None

        # set to None if itunes_summary (nullable) is None
        # and __fields_set__ contains the field
        if self.itunes_summary is None and "itunes_summary" in self.__fields_set__:
            _dict['itunes_summary'] = None

        # set to None if itunes_subtitle (nullable) is None
        # and __fields_set__ contains the field
        if self.itunes_subtitle is None and "itunes_subtitle" in self.__fields_set__:
            _dict['itunes_subtitle'] = None

        # set to None if itunes_category (nullable) is None
        # and __fields_set__ contains the field
        if self.itunes_category is None and "itunes_category" in self.__fields_set__:
            _dict['itunes_category'] = None

        # set to None if itunes_explicit (nullable) is None
        # and __fields_set__ contains the field
        if self.itunes_explicit is None and "itunes_explicit" in self.__fields_set__:
            _dict['itunes_explicit'] = None

        # set to None if owner (nullable) is None
        # and __fields_set__ contains the field
        if self.owner is None and "owner" in self.__fields_set__:
            _dict['owner'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Podcast:
        """Create an instance of Podcast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Podcast.parse_obj(obj)

        _obj = Podcast.parse_obj({
            "id": obj.get("id"),
            "url": obj.get("url"),
            "title": obj.get("title"),
            "creator": obj.get("creator"),
            "description": obj.get("description"),
            "language": obj.get("language"),
            "copyright": obj.get("copyright"),
            "link": obj.get("link"),
            "itunes_author": obj.get("itunes_author"),
            "itunes_keywords": obj.get("itunes_keywords"),
            "itunes_summary": obj.get("itunes_summary"),
            "itunes_subtitle": obj.get("itunes_subtitle"),
            "itunes_category": obj.get("itunes_category"),
            "itunes_explicit": obj.get("itunes_explicit"),
            "owner": obj.get("owner")
        })
        return _obj



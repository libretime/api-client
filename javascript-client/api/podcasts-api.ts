/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PatchedPodcast } from '../model';
// @ts-ignore
import type { Podcast } from '../model';
/**
 * PodcastsApi - axios parameter creator
 * @export
 */
export const PodcastsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Podcast} podcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsCreate: async (podcast: Podcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'podcast' is not null or undefined
            assertParamExists('podcastsCreate', 'podcast', podcast)
            const localVarPath = `/api/v2/podcasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(podcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('podcastsDestroy', 'id', id)
            const localVarPath = `/api/v2/podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/podcasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {PatchedPodcast} [patchedPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsPartialUpdate: async (id: number, patchedPodcast?: PatchedPodcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('podcastsPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPodcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('podcastsRetrieve', 'id', id)
            const localVarPath = `/api/v2/podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {Podcast} podcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsUpdate: async (id: number, podcast: Podcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('podcastsUpdate', 'id', id)
            // verify required parameter 'podcast' is not null or undefined
            assertParamExists('podcastsUpdate', 'podcast', podcast)
            const localVarPath = `/api/v2/podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(podcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PodcastsApi - functional programming interface
 * @export
 */
export const PodcastsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PodcastsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Podcast} podcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async podcastsCreate(podcast: Podcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Podcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsCreate(podcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PodcastsApi.podcastsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async podcastsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PodcastsApi.podcastsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async podcastsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Podcast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PodcastsApi.podcastsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {PatchedPodcast} [patchedPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async podcastsPartialUpdate(id: number, patchedPodcast?: PatchedPodcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Podcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsPartialUpdate(id, patchedPodcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PodcastsApi.podcastsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async podcastsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Podcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PodcastsApi.podcastsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {Podcast} podcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async podcastsUpdate(id: number, podcast: Podcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Podcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.podcastsUpdate(id, podcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PodcastsApi.podcastsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PodcastsApi - factory interface
 * @export
 */
export const PodcastsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PodcastsApiFp(configuration)
    return {
        /**
         * 
         * @param {Podcast} podcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsCreate(podcast: Podcast, options?: RawAxiosRequestConfig): AxiosPromise<Podcast> {
            return localVarFp.podcastsCreate(podcast, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.podcastsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Podcast>> {
            return localVarFp.podcastsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {PatchedPodcast} [patchedPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsPartialUpdate(id: number, patchedPodcast?: PatchedPodcast, options?: RawAxiosRequestConfig): AxiosPromise<Podcast> {
            return localVarFp.podcastsPartialUpdate(id, patchedPodcast, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Podcast> {
            return localVarFp.podcastsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this podcast.
         * @param {Podcast} podcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        podcastsUpdate(id: number, podcast: Podcast, options?: RawAxiosRequestConfig): AxiosPromise<Podcast> {
            return localVarFp.podcastsUpdate(id, podcast, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PodcastsApi - object-oriented interface
 * @export
 * @class PodcastsApi
 * @extends {BaseAPI}
 */
export class PodcastsApi extends BaseAPI {
    /**
     * 
     * @param {Podcast} podcast 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    public podcastsCreate(podcast: Podcast, options?: RawAxiosRequestConfig) {
        return PodcastsApiFp(this.configuration).podcastsCreate(podcast, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this podcast.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    public podcastsDestroy(id: number, options?: RawAxiosRequestConfig) {
        return PodcastsApiFp(this.configuration).podcastsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    public podcastsList(options?: RawAxiosRequestConfig) {
        return PodcastsApiFp(this.configuration).podcastsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this podcast.
     * @param {PatchedPodcast} [patchedPodcast] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    public podcastsPartialUpdate(id: number, patchedPodcast?: PatchedPodcast, options?: RawAxiosRequestConfig) {
        return PodcastsApiFp(this.configuration).podcastsPartialUpdate(id, patchedPodcast, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this podcast.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    public podcastsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return PodcastsApiFp(this.configuration).podcastsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this podcast.
     * @param {Podcast} podcast 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PodcastsApi
     */
    public podcastsUpdate(id: number, podcast: Podcast, options?: RawAxiosRequestConfig) {
        return PodcastsApiFp(this.configuration).podcastsUpdate(id, podcast, options).then((request) => request(this.axios, this.basePath));
    }
}


/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchedSmartBlockCriteria } from '../model';
// @ts-ignore
import { SmartBlockCriteria } from '../model';
/**
 * SmartBlockCriteriaApi - axios parameter creator
 * @export
 */
export const SmartBlockCriteriaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SmartBlockCriteria} smartBlockCriteria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaCreate: async (smartBlockCriteria: SmartBlockCriteria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartBlockCriteria' is not null or undefined
            assertParamExists('smartBlockCriteriaCreate', 'smartBlockCriteria', smartBlockCriteria)
            const localVarPath = `/api/v2/smart-block-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(smartBlockCriteria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('smartBlockCriteriaDestroy', 'id', id)
            const localVarPath = `/api/v2/smart-block-criteria/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/smart-block-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {PatchedSmartBlockCriteria} [patchedSmartBlockCriteria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaPartialUpdate: async (id: number, patchedSmartBlockCriteria?: PatchedSmartBlockCriteria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('smartBlockCriteriaPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/smart-block-criteria/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSmartBlockCriteria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('smartBlockCriteriaRetrieve', 'id', id)
            const localVarPath = `/api/v2/smart-block-criteria/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {SmartBlockCriteria} smartBlockCriteria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaUpdate: async (id: number, smartBlockCriteria: SmartBlockCriteria, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('smartBlockCriteriaUpdate', 'id', id)
            // verify required parameter 'smartBlockCriteria' is not null or undefined
            assertParamExists('smartBlockCriteriaUpdate', 'smartBlockCriteria', smartBlockCriteria)
            const localVarPath = `/api/v2/smart-block-criteria/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(smartBlockCriteria, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SmartBlockCriteriaApi - functional programming interface
 * @export
 */
export const SmartBlockCriteriaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SmartBlockCriteriaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SmartBlockCriteria} smartBlockCriteria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlockCriteriaCreate(smartBlockCriteria: SmartBlockCriteria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartBlockCriteria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlockCriteriaCreate(smartBlockCriteria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlockCriteriaDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlockCriteriaDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlockCriteriaList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SmartBlockCriteria>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlockCriteriaList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {PatchedSmartBlockCriteria} [patchedSmartBlockCriteria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlockCriteriaPartialUpdate(id: number, patchedSmartBlockCriteria?: PatchedSmartBlockCriteria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartBlockCriteria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlockCriteriaPartialUpdate(id, patchedSmartBlockCriteria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlockCriteriaRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartBlockCriteria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlockCriteriaRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {SmartBlockCriteria} smartBlockCriteria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlockCriteriaUpdate(id: number, smartBlockCriteria: SmartBlockCriteria, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartBlockCriteria>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlockCriteriaUpdate(id, smartBlockCriteria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SmartBlockCriteriaApi - factory interface
 * @export
 */
export const SmartBlockCriteriaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SmartBlockCriteriaApiFp(configuration)
    return {
        /**
         * 
         * @param {SmartBlockCriteria} smartBlockCriteria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaCreate(smartBlockCriteria: SmartBlockCriteria, options?: any): AxiosPromise<SmartBlockCriteria> {
            return localVarFp.smartBlockCriteriaCreate(smartBlockCriteria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.smartBlockCriteriaDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaList(options?: any): AxiosPromise<Array<SmartBlockCriteria>> {
            return localVarFp.smartBlockCriteriaList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {PatchedSmartBlockCriteria} [patchedSmartBlockCriteria] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaPartialUpdate(id: number, patchedSmartBlockCriteria?: PatchedSmartBlockCriteria, options?: any): AxiosPromise<SmartBlockCriteria> {
            return localVarFp.smartBlockCriteriaPartialUpdate(id, patchedSmartBlockCriteria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaRetrieve(id: number, options?: any): AxiosPromise<SmartBlockCriteria> {
            return localVarFp.smartBlockCriteriaRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block criteria.
         * @param {SmartBlockCriteria} smartBlockCriteria 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlockCriteriaUpdate(id: number, smartBlockCriteria: SmartBlockCriteria, options?: any): AxiosPromise<SmartBlockCriteria> {
            return localVarFp.smartBlockCriteriaUpdate(id, smartBlockCriteria, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SmartBlockCriteriaApi - object-oriented interface
 * @export
 * @class SmartBlockCriteriaApi
 * @extends {BaseAPI}
 */
export class SmartBlockCriteriaApi extends BaseAPI {
    /**
     * 
     * @param {SmartBlockCriteria} smartBlockCriteria 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlockCriteriaApi
     */
    public smartBlockCriteriaCreate(smartBlockCriteria: SmartBlockCriteria, options?: AxiosRequestConfig) {
        return SmartBlockCriteriaApiFp(this.configuration).smartBlockCriteriaCreate(smartBlockCriteria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this smart block criteria.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlockCriteriaApi
     */
    public smartBlockCriteriaDestroy(id: number, options?: AxiosRequestConfig) {
        return SmartBlockCriteriaApiFp(this.configuration).smartBlockCriteriaDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlockCriteriaApi
     */
    public smartBlockCriteriaList(options?: AxiosRequestConfig) {
        return SmartBlockCriteriaApiFp(this.configuration).smartBlockCriteriaList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this smart block criteria.
     * @param {PatchedSmartBlockCriteria} [patchedSmartBlockCriteria] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlockCriteriaApi
     */
    public smartBlockCriteriaPartialUpdate(id: number, patchedSmartBlockCriteria?: PatchedSmartBlockCriteria, options?: AxiosRequestConfig) {
        return SmartBlockCriteriaApiFp(this.configuration).smartBlockCriteriaPartialUpdate(id, patchedSmartBlockCriteria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this smart block criteria.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlockCriteriaApi
     */
    public smartBlockCriteriaRetrieve(id: number, options?: AxiosRequestConfig) {
        return SmartBlockCriteriaApiFp(this.configuration).smartBlockCriteriaRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this smart block criteria.
     * @param {SmartBlockCriteria} smartBlockCriteria 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlockCriteriaApi
     */
    public smartBlockCriteriaUpdate(id: number, smartBlockCriteria: SmartBlockCriteria, options?: AxiosRequestConfig) {
        return SmartBlockCriteriaApiFp(this.configuration).smartBlockCriteriaUpdate(id, smartBlockCriteria, options).then((request) => request(this.axios, this.basePath));
    }
}


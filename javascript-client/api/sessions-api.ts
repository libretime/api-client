/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchedSession } from '../model';
// @ts-ignore
import { Session } from '../model';
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export const SessionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsCreate: async (session?: Session, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/sessions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(session, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsDestroy: async (sessid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessid' is not null or undefined
            assertParamExists('sessionsDestroy', 'sessid', sessid)
            const localVarPath = `/api/v2/sessions/{sessid}/`
                .replace(`{${"sessid"}}`, encodeURIComponent(String(sessid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/sessions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {PatchedSession} [patchedSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsPartialUpdate: async (sessid: string, patchedSession?: PatchedSession, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessid' is not null or undefined
            assertParamExists('sessionsPartialUpdate', 'sessid', sessid)
            const localVarPath = `/api/v2/sessions/{sessid}/`
                .replace(`{${"sessid"}}`, encodeURIComponent(String(sessid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSession, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsRetrieve: async (sessid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessid' is not null or undefined
            assertParamExists('sessionsRetrieve', 'sessid', sessid)
            const localVarPath = `/api/v2/sessions/{sessid}/`
                .replace(`{${"sessid"}}`, encodeURIComponent(String(sessid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsUpdate: async (sessid: string, session?: Session, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessid' is not null or undefined
            assertParamExists('sessionsUpdate', 'sessid', sessid)
            const localVarPath = `/api/v2/sessions/{sessid}/`
                .replace(`{${"sessid"}}`, encodeURIComponent(String(sessid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(session, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionsApi - functional programming interface
 * @export
 */
export const SessionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsCreate(session?: Session, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsCreate(session, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsDestroy(sessid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsDestroy(sessid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {PatchedSession} [patchedSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsPartialUpdate(sessid: string, patchedSession?: PatchedSession, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsPartialUpdate(sessid, patchedSession, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsRetrieve(sessid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsRetrieve(sessid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionsUpdate(sessid: string, session?: Session, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionsUpdate(sessid, session, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SessionsApi - factory interface
 * @export
 */
export const SessionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionsApiFp(configuration)
    return {
        /**
         * 
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsCreate(session?: Session, options?: any): AxiosPromise<Session> {
            return localVarFp.sessionsCreate(session, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsDestroy(sessid: string, options?: any): AxiosPromise<void> {
            return localVarFp.sessionsDestroy(sessid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsList(options?: any): AxiosPromise<Array<Session>> {
            return localVarFp.sessionsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {PatchedSession} [patchedSession] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsPartialUpdate(sessid: string, patchedSession?: PatchedSession, options?: any): AxiosPromise<Session> {
            return localVarFp.sessionsPartialUpdate(sessid, patchedSession, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsRetrieve(sessid: string, options?: any): AxiosPromise<Session> {
            return localVarFp.sessionsRetrieve(sessid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sessid A unique value identifying this session.
         * @param {Session} [session] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionsUpdate(sessid: string, session?: Session, options?: any): AxiosPromise<Session> {
            return localVarFp.sessionsUpdate(sessid, session, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export class SessionsApi extends BaseAPI {
    /**
     * 
     * @param {Session} [session] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsCreate(session?: Session, options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).sessionsCreate(session, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sessid A unique value identifying this session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsDestroy(sessid: string, options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).sessionsDestroy(sessid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsList(options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).sessionsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sessid A unique value identifying this session.
     * @param {PatchedSession} [patchedSession] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsPartialUpdate(sessid: string, patchedSession?: PatchedSession, options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).sessionsPartialUpdate(sessid, patchedSession, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sessid A unique value identifying this session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsRetrieve(sessid: string, options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).sessionsRetrieve(sessid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sessid A unique value identifying this session.
     * @param {Session} [session] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    public sessionsUpdate(sessid: string, session?: Session, options?: AxiosRequestConfig) {
        return SessionsApiFp(this.configuration).sessionsUpdate(sessid, session, options).then((request) => request(this.axios, this.basePath));
    }
}

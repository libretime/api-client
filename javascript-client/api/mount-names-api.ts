/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MountName } from '../model';
// @ts-ignore
import type { PatchedMountName } from '../model';
/**
 * MountNamesApi - axios parameter creator
 * @export
 */
export const MountNamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MountName} mountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesCreate: async (mountName: MountName, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mountName' is not null or undefined
            assertParamExists('mountNamesCreate', 'mountName', mountName)
            const localVarPath = `/api/v2/mount-names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mountName, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mountNamesDestroy', 'id', id)
            const localVarPath = `/api/v2/mount-names/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/mount-names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {PatchedMountName} [patchedMountName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesPartialUpdate: async (id: number, patchedMountName?: PatchedMountName, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mountNamesPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/mount-names/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMountName, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mountNamesRetrieve', 'id', id)
            const localVarPath = `/api/v2/mount-names/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {MountName} mountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesUpdate: async (id: number, mountName: MountName, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mountNamesUpdate', 'id', id)
            // verify required parameter 'mountName' is not null or undefined
            assertParamExists('mountNamesUpdate', 'mountName', mountName)
            const localVarPath = `/api/v2/mount-names/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mountName, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MountNamesApi - functional programming interface
 * @export
 */
export const MountNamesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MountNamesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MountName} mountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mountNamesCreate(mountName: MountName, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MountName>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mountNamesCreate(mountName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MountNamesApi.mountNamesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mountNamesDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mountNamesDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MountNamesApi.mountNamesDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mountNamesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MountName>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mountNamesList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MountNamesApi.mountNamesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {PatchedMountName} [patchedMountName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mountNamesPartialUpdate(id: number, patchedMountName?: PatchedMountName, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MountName>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mountNamesPartialUpdate(id, patchedMountName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MountNamesApi.mountNamesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mountNamesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MountName>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mountNamesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MountNamesApi.mountNamesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {MountName} mountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mountNamesUpdate(id: number, mountName: MountName, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MountName>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mountNamesUpdate(id, mountName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MountNamesApi.mountNamesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MountNamesApi - factory interface
 * @export
 */
export const MountNamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MountNamesApiFp(configuration)
    return {
        /**
         * 
         * @param {MountName} mountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesCreate(mountName: MountName, options?: RawAxiosRequestConfig): AxiosPromise<MountName> {
            return localVarFp.mountNamesCreate(mountName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mountNamesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesList(options?: RawAxiosRequestConfig): AxiosPromise<Array<MountName>> {
            return localVarFp.mountNamesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {PatchedMountName} [patchedMountName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesPartialUpdate(id: number, patchedMountName?: PatchedMountName, options?: RawAxiosRequestConfig): AxiosPromise<MountName> {
            return localVarFp.mountNamesPartialUpdate(id, patchedMountName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<MountName> {
            return localVarFp.mountNamesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this mount name.
         * @param {MountName} mountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mountNamesUpdate(id: number, mountName: MountName, options?: RawAxiosRequestConfig): AxiosPromise<MountName> {
            return localVarFp.mountNamesUpdate(id, mountName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MountNamesApi - object-oriented interface
 * @export
 * @class MountNamesApi
 * @extends {BaseAPI}
 */
export class MountNamesApi extends BaseAPI {
    /**
     * 
     * @param {MountName} mountName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MountNamesApi
     */
    public mountNamesCreate(mountName: MountName, options?: RawAxiosRequestConfig) {
        return MountNamesApiFp(this.configuration).mountNamesCreate(mountName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this mount name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MountNamesApi
     */
    public mountNamesDestroy(id: number, options?: RawAxiosRequestConfig) {
        return MountNamesApiFp(this.configuration).mountNamesDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MountNamesApi
     */
    public mountNamesList(options?: RawAxiosRequestConfig) {
        return MountNamesApiFp(this.configuration).mountNamesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this mount name.
     * @param {PatchedMountName} [patchedMountName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MountNamesApi
     */
    public mountNamesPartialUpdate(id: number, patchedMountName?: PatchedMountName, options?: RawAxiosRequestConfig) {
        return MountNamesApiFp(this.configuration).mountNamesPartialUpdate(id, patchedMountName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this mount name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MountNamesApi
     */
    public mountNamesRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return MountNamesApiFp(this.configuration).mountNamesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this mount name.
     * @param {MountName} mountName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MountNamesApi
     */
    public mountNamesUpdate(id: number, mountName: MountName, options?: RawAxiosRequestConfig) {
        return MountNamesApiFp(this.configuration).mountNamesUpdate(id, mountName, options).then((request) => request(this.axios, this.basePath));
    }
}


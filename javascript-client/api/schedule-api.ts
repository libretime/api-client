/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchedSchedule } from '../model';
// @ts-ignore
import { Schedule } from '../model';
/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Schedule} schedule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleCreate: async (schedule: Schedule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schedule' is not null or undefined
            assertParamExists('scheduleCreate', 'schedule', schedule)
            const localVarPath = `/api/v2/schedule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schedule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scheduleDestroy', 'id', id)
            const localVarPath = `/api/v2/schedule/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [broadcasted] 
         * @param {number} [broadcastedGt] 
         * @param {number} [broadcastedGte] 
         * @param {number} [broadcastedLt] 
         * @param {number} [broadcastedLte] 
         * @param {Array<number>} [broadcastedRange] Multiple values may be separated by commas.
         * @param {string} [ends] 
         * @param {string} [endsGt] 
         * @param {string} [endsGte] 
         * @param {string} [endsLt] 
         * @param {string} [endsLte] 
         * @param {Array<string>} [endsRange] Multiple values may be separated by commas.
         * @param {boolean} [isValid] Filter on valid instances
         * @param {number} [playoutStatus] 
         * @param {number} [playoutStatusGt] 
         * @param {number} [playoutStatusGte] 
         * @param {number} [playoutStatusLt] 
         * @param {number} [playoutStatusLte] 
         * @param {Array<number>} [playoutStatusRange] Multiple values may be separated by commas.
         * @param {string} [starts] 
         * @param {string} [startsGt] 
         * @param {string} [startsGte] 
         * @param {string} [startsLt] 
         * @param {string} [startsLte] 
         * @param {Array<string>} [startsRange] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleList: async (broadcasted?: number, broadcastedGt?: number, broadcastedGte?: number, broadcastedLt?: number, broadcastedLte?: number, broadcastedRange?: Array<number>, ends?: string, endsGt?: string, endsGte?: string, endsLt?: string, endsLte?: string, endsRange?: Array<string>, isValid?: boolean, playoutStatus?: number, playoutStatusGt?: number, playoutStatusGte?: number, playoutStatusLt?: number, playoutStatusLte?: number, playoutStatusRange?: Array<number>, starts?: string, startsGt?: string, startsGte?: string, startsLt?: string, startsLte?: string, startsRange?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/schedule/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (broadcasted !== undefined) {
                localVarQueryParameter['broadcasted'] = broadcasted;
            }

            if (broadcastedGt !== undefined) {
                localVarQueryParameter['broadcasted__gt'] = broadcastedGt;
            }

            if (broadcastedGte !== undefined) {
                localVarQueryParameter['broadcasted__gte'] = broadcastedGte;
            }

            if (broadcastedLt !== undefined) {
                localVarQueryParameter['broadcasted__lt'] = broadcastedLt;
            }

            if (broadcastedLte !== undefined) {
                localVarQueryParameter['broadcasted__lte'] = broadcastedLte;
            }

            if (broadcastedRange) {
                localVarQueryParameter['broadcasted__range'] = broadcastedRange.join(COLLECTION_FORMATS.csv);
            }

            if (ends !== undefined) {
                localVarQueryParameter['ends'] = (ends as any instanceof Date) ?
                    (ends as any).toISOString() :
                    ends;
            }

            if (endsGt !== undefined) {
                localVarQueryParameter['ends__gt'] = (endsGt as any instanceof Date) ?
                    (endsGt as any).toISOString() :
                    endsGt;
            }

            if (endsGte !== undefined) {
                localVarQueryParameter['ends__gte'] = (endsGte as any instanceof Date) ?
                    (endsGte as any).toISOString() :
                    endsGte;
            }

            if (endsLt !== undefined) {
                localVarQueryParameter['ends__lt'] = (endsLt as any instanceof Date) ?
                    (endsLt as any).toISOString() :
                    endsLt;
            }

            if (endsLte !== undefined) {
                localVarQueryParameter['ends__lte'] = (endsLte as any instanceof Date) ?
                    (endsLte as any).toISOString() :
                    endsLte;
            }

            if (endsRange) {
                localVarQueryParameter['ends__range'] = endsRange.join(COLLECTION_FORMATS.csv);
            }

            if (isValid !== undefined) {
                localVarQueryParameter['is_valid'] = isValid;
            }

            if (playoutStatus !== undefined) {
                localVarQueryParameter['playout_status'] = playoutStatus;
            }

            if (playoutStatusGt !== undefined) {
                localVarQueryParameter['playout_status__gt'] = playoutStatusGt;
            }

            if (playoutStatusGte !== undefined) {
                localVarQueryParameter['playout_status__gte'] = playoutStatusGte;
            }

            if (playoutStatusLt !== undefined) {
                localVarQueryParameter['playout_status__lt'] = playoutStatusLt;
            }

            if (playoutStatusLte !== undefined) {
                localVarQueryParameter['playout_status__lte'] = playoutStatusLte;
            }

            if (playoutStatusRange) {
                localVarQueryParameter['playout_status__range'] = playoutStatusRange.join(COLLECTION_FORMATS.csv);
            }

            if (starts !== undefined) {
                localVarQueryParameter['starts'] = (starts as any instanceof Date) ?
                    (starts as any).toISOString() :
                    starts;
            }

            if (startsGt !== undefined) {
                localVarQueryParameter['starts__gt'] = (startsGt as any instanceof Date) ?
                    (startsGt as any).toISOString() :
                    startsGt;
            }

            if (startsGte !== undefined) {
                localVarQueryParameter['starts__gte'] = (startsGte as any instanceof Date) ?
                    (startsGte as any).toISOString() :
                    startsGte;
            }

            if (startsLt !== undefined) {
                localVarQueryParameter['starts__lt'] = (startsLt as any instanceof Date) ?
                    (startsLt as any).toISOString() :
                    startsLt;
            }

            if (startsLte !== undefined) {
                localVarQueryParameter['starts__lte'] = (startsLte as any instanceof Date) ?
                    (startsLte as any).toISOString() :
                    startsLte;
            }

            if (startsRange) {
                localVarQueryParameter['starts__range'] = startsRange.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {PatchedSchedule} [patchedSchedule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulePartialUpdate: async (id: number, patchedSchedule?: PatchedSchedule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('schedulePartialUpdate', 'id', id)
            const localVarPath = `/api/v2/schedule/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSchedule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scheduleRetrieve', 'id', id)
            const localVarPath = `/api/v2/schedule/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {Schedule} schedule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleUpdate: async (id: number, schedule: Schedule, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scheduleUpdate', 'id', id)
            // verify required parameter 'schedule' is not null or undefined
            assertParamExists('scheduleUpdate', 'schedule', schedule)
            const localVarPath = `/api/v2/schedule/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schedule, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Schedule} schedule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleCreate(schedule: Schedule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleCreate(schedule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [broadcasted] 
         * @param {number} [broadcastedGt] 
         * @param {number} [broadcastedGte] 
         * @param {number} [broadcastedLt] 
         * @param {number} [broadcastedLte] 
         * @param {Array<number>} [broadcastedRange] Multiple values may be separated by commas.
         * @param {string} [ends] 
         * @param {string} [endsGt] 
         * @param {string} [endsGte] 
         * @param {string} [endsLt] 
         * @param {string} [endsLte] 
         * @param {Array<string>} [endsRange] Multiple values may be separated by commas.
         * @param {boolean} [isValid] Filter on valid instances
         * @param {number} [playoutStatus] 
         * @param {number} [playoutStatusGt] 
         * @param {number} [playoutStatusGte] 
         * @param {number} [playoutStatusLt] 
         * @param {number} [playoutStatusLte] 
         * @param {Array<number>} [playoutStatusRange] Multiple values may be separated by commas.
         * @param {string} [starts] 
         * @param {string} [startsGt] 
         * @param {string} [startsGte] 
         * @param {string} [startsLt] 
         * @param {string} [startsLte] 
         * @param {Array<string>} [startsRange] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleList(broadcasted?: number, broadcastedGt?: number, broadcastedGte?: number, broadcastedLt?: number, broadcastedLte?: number, broadcastedRange?: Array<number>, ends?: string, endsGt?: string, endsGte?: string, endsLt?: string, endsLte?: string, endsRange?: Array<string>, isValid?: boolean, playoutStatus?: number, playoutStatusGt?: number, playoutStatusGte?: number, playoutStatusLt?: number, playoutStatusLte?: number, playoutStatusRange?: Array<number>, starts?: string, startsGt?: string, startsGte?: string, startsLt?: string, startsLte?: string, startsRange?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Schedule>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleList(broadcasted, broadcastedGt, broadcastedGte, broadcastedLt, broadcastedLte, broadcastedRange, ends, endsGt, endsGte, endsLt, endsLte, endsRange, isValid, playoutStatus, playoutStatusGt, playoutStatusGte, playoutStatusLt, playoutStatusLte, playoutStatusRange, starts, startsGt, startsGte, startsLt, startsLte, startsRange, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {PatchedSchedule} [patchedSchedule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schedulePartialUpdate(id: number, patchedSchedule?: PatchedSchedule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schedulePartialUpdate(id, patchedSchedule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {Schedule} schedule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleUpdate(id: number, schedule: Schedule, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleUpdate(id, schedule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * 
         * @param {Schedule} schedule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleCreate(schedule: Schedule, options?: any): AxiosPromise<Schedule> {
            return localVarFp.scheduleCreate(schedule, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.scheduleDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [broadcasted] 
         * @param {number} [broadcastedGt] 
         * @param {number} [broadcastedGte] 
         * @param {number} [broadcastedLt] 
         * @param {number} [broadcastedLte] 
         * @param {Array<number>} [broadcastedRange] Multiple values may be separated by commas.
         * @param {string} [ends] 
         * @param {string} [endsGt] 
         * @param {string} [endsGte] 
         * @param {string} [endsLt] 
         * @param {string} [endsLte] 
         * @param {Array<string>} [endsRange] Multiple values may be separated by commas.
         * @param {boolean} [isValid] Filter on valid instances
         * @param {number} [playoutStatus] 
         * @param {number} [playoutStatusGt] 
         * @param {number} [playoutStatusGte] 
         * @param {number} [playoutStatusLt] 
         * @param {number} [playoutStatusLte] 
         * @param {Array<number>} [playoutStatusRange] Multiple values may be separated by commas.
         * @param {string} [starts] 
         * @param {string} [startsGt] 
         * @param {string} [startsGte] 
         * @param {string} [startsLt] 
         * @param {string} [startsLte] 
         * @param {Array<string>} [startsRange] Multiple values may be separated by commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleList(broadcasted?: number, broadcastedGt?: number, broadcastedGte?: number, broadcastedLt?: number, broadcastedLte?: number, broadcastedRange?: Array<number>, ends?: string, endsGt?: string, endsGte?: string, endsLt?: string, endsLte?: string, endsRange?: Array<string>, isValid?: boolean, playoutStatus?: number, playoutStatusGt?: number, playoutStatusGte?: number, playoutStatusLt?: number, playoutStatusLte?: number, playoutStatusRange?: Array<number>, starts?: string, startsGt?: string, startsGte?: string, startsLt?: string, startsLte?: string, startsRange?: Array<string>, options?: any): AxiosPromise<Array<Schedule>> {
            return localVarFp.scheduleList(broadcasted, broadcastedGt, broadcastedGte, broadcastedLt, broadcastedLte, broadcastedRange, ends, endsGt, endsGte, endsLt, endsLte, endsRange, isValid, playoutStatus, playoutStatusGt, playoutStatusGte, playoutStatusLt, playoutStatusLte, playoutStatusRange, starts, startsGt, startsGte, startsLt, startsLte, startsRange, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {PatchedSchedule} [patchedSchedule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulePartialUpdate(id: number, patchedSchedule?: PatchedSchedule, options?: any): AxiosPromise<Schedule> {
            return localVarFp.schedulePartialUpdate(id, patchedSchedule, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleRetrieve(id: number, options?: any): AxiosPromise<Schedule> {
            return localVarFp.scheduleRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this schedule.
         * @param {Schedule} schedule 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleUpdate(id: number, schedule: Schedule, options?: any): AxiosPromise<Schedule> {
            return localVarFp.scheduleUpdate(id, schedule, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * 
     * @param {Schedule} schedule 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleCreate(schedule: Schedule, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleCreate(schedule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this schedule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleDestroy(id: number, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [broadcasted] 
     * @param {number} [broadcastedGt] 
     * @param {number} [broadcastedGte] 
     * @param {number} [broadcastedLt] 
     * @param {number} [broadcastedLte] 
     * @param {Array<number>} [broadcastedRange] Multiple values may be separated by commas.
     * @param {string} [ends] 
     * @param {string} [endsGt] 
     * @param {string} [endsGte] 
     * @param {string} [endsLt] 
     * @param {string} [endsLte] 
     * @param {Array<string>} [endsRange] Multiple values may be separated by commas.
     * @param {boolean} [isValid] Filter on valid instances
     * @param {number} [playoutStatus] 
     * @param {number} [playoutStatusGt] 
     * @param {number} [playoutStatusGte] 
     * @param {number} [playoutStatusLt] 
     * @param {number} [playoutStatusLte] 
     * @param {Array<number>} [playoutStatusRange] Multiple values may be separated by commas.
     * @param {string} [starts] 
     * @param {string} [startsGt] 
     * @param {string} [startsGte] 
     * @param {string} [startsLt] 
     * @param {string} [startsLte] 
     * @param {Array<string>} [startsRange] Multiple values may be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleList(broadcasted?: number, broadcastedGt?: number, broadcastedGte?: number, broadcastedLt?: number, broadcastedLte?: number, broadcastedRange?: Array<number>, ends?: string, endsGt?: string, endsGte?: string, endsLt?: string, endsLte?: string, endsRange?: Array<string>, isValid?: boolean, playoutStatus?: number, playoutStatusGt?: number, playoutStatusGte?: number, playoutStatusLt?: number, playoutStatusLte?: number, playoutStatusRange?: Array<number>, starts?: string, startsGt?: string, startsGte?: string, startsLt?: string, startsLte?: string, startsRange?: Array<string>, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleList(broadcasted, broadcastedGt, broadcastedGte, broadcastedLt, broadcastedLte, broadcastedRange, ends, endsGt, endsGte, endsLt, endsLte, endsRange, isValid, playoutStatus, playoutStatusGt, playoutStatusGte, playoutStatusLt, playoutStatusLte, playoutStatusRange, starts, startsGt, startsGte, startsLt, startsLte, startsRange, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this schedule.
     * @param {PatchedSchedule} [patchedSchedule] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public schedulePartialUpdate(id: number, patchedSchedule?: PatchedSchedule, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).schedulePartialUpdate(id, patchedSchedule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this schedule.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleRetrieve(id: number, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this schedule.
     * @param {Schedule} schedule 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleUpdate(id: number, schedule: Schedule, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleUpdate(id, schedule, options).then((request) => request(this.axios, this.basePath));
    }
}

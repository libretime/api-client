/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MusicDir } from '../model';
// @ts-ignore
import { PatchedMusicDir } from '../model';
/**
 * MusicDirsApi - axios parameter creator
 * @export
 */
export const MusicDirsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MusicDir} [musicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsCreate: async (musicDir?: MusicDir, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/music-dirs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(musicDir, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('musicDirsDestroy', 'id', id)
            const localVarPath = `/api/v2/music-dirs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/music-dirs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {PatchedMusicDir} [patchedMusicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsPartialUpdate: async (id: number, patchedMusicDir?: PatchedMusicDir, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('musicDirsPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/music-dirs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMusicDir, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('musicDirsRetrieve', 'id', id)
            const localVarPath = `/api/v2/music-dirs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {MusicDir} [musicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsUpdate: async (id: number, musicDir?: MusicDir, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('musicDirsUpdate', 'id', id)
            const localVarPath = `/api/v2/music-dirs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(musicDir, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MusicDirsApi - functional programming interface
 * @export
 */
export const MusicDirsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MusicDirsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MusicDir} [musicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async musicDirsCreate(musicDir?: MusicDir, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicDir>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.musicDirsCreate(musicDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async musicDirsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.musicDirsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async musicDirsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MusicDir>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.musicDirsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {PatchedMusicDir} [patchedMusicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async musicDirsPartialUpdate(id: number, patchedMusicDir?: PatchedMusicDir, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicDir>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.musicDirsPartialUpdate(id, patchedMusicDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async musicDirsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicDir>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.musicDirsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {MusicDir} [musicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async musicDirsUpdate(id: number, musicDir?: MusicDir, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicDir>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.musicDirsUpdate(id, musicDir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MusicDirsApi - factory interface
 * @export
 */
export const MusicDirsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MusicDirsApiFp(configuration)
    return {
        /**
         * 
         * @param {MusicDir} [musicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsCreate(musicDir?: MusicDir, options?: any): AxiosPromise<MusicDir> {
            return localVarFp.musicDirsCreate(musicDir, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.musicDirsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsList(options?: any): AxiosPromise<Array<MusicDir>> {
            return localVarFp.musicDirsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {PatchedMusicDir} [patchedMusicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsPartialUpdate(id: number, patchedMusicDir?: PatchedMusicDir, options?: any): AxiosPromise<MusicDir> {
            return localVarFp.musicDirsPartialUpdate(id, patchedMusicDir, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsRetrieve(id: number, options?: any): AxiosPromise<MusicDir> {
            return localVarFp.musicDirsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this music dir.
         * @param {MusicDir} [musicDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        musicDirsUpdate(id: number, musicDir?: MusicDir, options?: any): AxiosPromise<MusicDir> {
            return localVarFp.musicDirsUpdate(id, musicDir, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MusicDirsApi - object-oriented interface
 * @export
 * @class MusicDirsApi
 * @extends {BaseAPI}
 */
export class MusicDirsApi extends BaseAPI {
    /**
     * 
     * @param {MusicDir} [musicDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicDirsApi
     */
    public musicDirsCreate(musicDir?: MusicDir, options?: AxiosRequestConfig) {
        return MusicDirsApiFp(this.configuration).musicDirsCreate(musicDir, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this music dir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicDirsApi
     */
    public musicDirsDestroy(id: number, options?: AxiosRequestConfig) {
        return MusicDirsApiFp(this.configuration).musicDirsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicDirsApi
     */
    public musicDirsList(options?: AxiosRequestConfig) {
        return MusicDirsApiFp(this.configuration).musicDirsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this music dir.
     * @param {PatchedMusicDir} [patchedMusicDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicDirsApi
     */
    public musicDirsPartialUpdate(id: number, patchedMusicDir?: PatchedMusicDir, options?: AxiosRequestConfig) {
        return MusicDirsApiFp(this.configuration).musicDirsPartialUpdate(id, patchedMusicDir, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this music dir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicDirsApi
     */
    public musicDirsRetrieve(id: number, options?: AxiosRequestConfig) {
        return MusicDirsApiFp(this.configuration).musicDirsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this music dir.
     * @param {MusicDir} [musicDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicDirsApi
     */
    public musicDirsUpdate(id: number, musicDir?: MusicDir, options?: AxiosRequestConfig) {
        return MusicDirsApiFp(this.configuration).musicDirsUpdate(id, musicDir, options).then((request) => request(this.axios, this.basePath));
    }
}

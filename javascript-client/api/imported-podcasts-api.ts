/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ImportedPodcast } from '../model';
// @ts-ignore
import type { PatchedImportedPodcast } from '../model';
/**
 * ImportedPodcastsApi - axios parameter creator
 * @export
 */
export const ImportedPodcastsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ImportedPodcast} importedPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsCreate: async (importedPodcast: ImportedPodcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importedPodcast' is not null or undefined
            assertParamExists('importedPodcastsCreate', 'importedPodcast', importedPodcast)
            const localVarPath = `/api/v2/imported-podcasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importedPodcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('importedPodcastsDestroy', 'id', id)
            const localVarPath = `/api/v2/imported-podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/imported-podcasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {PatchedImportedPodcast} [patchedImportedPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsPartialUpdate: async (id: number, patchedImportedPodcast?: PatchedImportedPodcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('importedPodcastsPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/imported-podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedImportedPodcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('importedPodcastsRetrieve', 'id', id)
            const localVarPath = `/api/v2/imported-podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {ImportedPodcast} importedPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsUpdate: async (id: number, importedPodcast: ImportedPodcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('importedPodcastsUpdate', 'id', id)
            // verify required parameter 'importedPodcast' is not null or undefined
            assertParamExists('importedPodcastsUpdate', 'importedPodcast', importedPodcast)
            const localVarPath = `/api/v2/imported-podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importedPodcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImportedPodcastsApi - functional programming interface
 * @export
 */
export const ImportedPodcastsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImportedPodcastsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ImportedPodcast} importedPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importedPodcastsCreate(importedPodcast: ImportedPodcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportedPodcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importedPodcastsCreate(importedPodcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImportedPodcastsApi.importedPodcastsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importedPodcastsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importedPodcastsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImportedPodcastsApi.importedPodcastsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importedPodcastsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImportedPodcast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importedPodcastsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImportedPodcastsApi.importedPodcastsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {PatchedImportedPodcast} [patchedImportedPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importedPodcastsPartialUpdate(id: number, patchedImportedPodcast?: PatchedImportedPodcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportedPodcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importedPodcastsPartialUpdate(id, patchedImportedPodcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImportedPodcastsApi.importedPodcastsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importedPodcastsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportedPodcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importedPodcastsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImportedPodcastsApi.importedPodcastsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {ImportedPodcast} importedPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importedPodcastsUpdate(id: number, importedPodcast: ImportedPodcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportedPodcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importedPodcastsUpdate(id, importedPodcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImportedPodcastsApi.importedPodcastsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImportedPodcastsApi - factory interface
 * @export
 */
export const ImportedPodcastsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImportedPodcastsApiFp(configuration)
    return {
        /**
         * 
         * @param {ImportedPodcast} importedPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsCreate(importedPodcast: ImportedPodcast, options?: any): AxiosPromise<ImportedPodcast> {
            return localVarFp.importedPodcastsCreate(importedPodcast, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.importedPodcastsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsList(options?: any): AxiosPromise<Array<ImportedPodcast>> {
            return localVarFp.importedPodcastsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {PatchedImportedPodcast} [patchedImportedPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsPartialUpdate(id: number, patchedImportedPodcast?: PatchedImportedPodcast, options?: any): AxiosPromise<ImportedPodcast> {
            return localVarFp.importedPodcastsPartialUpdate(id, patchedImportedPodcast, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsRetrieve(id: number, options?: any): AxiosPromise<ImportedPodcast> {
            return localVarFp.importedPodcastsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this imported podcast.
         * @param {ImportedPodcast} importedPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importedPodcastsUpdate(id: number, importedPodcast: ImportedPodcast, options?: any): AxiosPromise<ImportedPodcast> {
            return localVarFp.importedPodcastsUpdate(id, importedPodcast, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImportedPodcastsApi - object-oriented interface
 * @export
 * @class ImportedPodcastsApi
 * @extends {BaseAPI}
 */
export class ImportedPodcastsApi extends BaseAPI {
    /**
     * 
     * @param {ImportedPodcast} importedPodcast 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportedPodcastsApi
     */
    public importedPodcastsCreate(importedPodcast: ImportedPodcast, options?: RawAxiosRequestConfig) {
        return ImportedPodcastsApiFp(this.configuration).importedPodcastsCreate(importedPodcast, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this imported podcast.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportedPodcastsApi
     */
    public importedPodcastsDestroy(id: number, options?: RawAxiosRequestConfig) {
        return ImportedPodcastsApiFp(this.configuration).importedPodcastsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportedPodcastsApi
     */
    public importedPodcastsList(options?: RawAxiosRequestConfig) {
        return ImportedPodcastsApiFp(this.configuration).importedPodcastsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this imported podcast.
     * @param {PatchedImportedPodcast} [patchedImportedPodcast] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportedPodcastsApi
     */
    public importedPodcastsPartialUpdate(id: number, patchedImportedPodcast?: PatchedImportedPodcast, options?: RawAxiosRequestConfig) {
        return ImportedPodcastsApiFp(this.configuration).importedPodcastsPartialUpdate(id, patchedImportedPodcast, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this imported podcast.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportedPodcastsApi
     */
    public importedPodcastsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return ImportedPodcastsApiFp(this.configuration).importedPodcastsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this imported podcast.
     * @param {ImportedPodcast} importedPodcast 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportedPodcastsApi
     */
    public importedPodcastsUpdate(id: number, importedPodcast: ImportedPodcast, options?: RawAxiosRequestConfig) {
        return ImportedPodcastsApiFp(this.configuration).importedPodcastsUpdate(id, importedPodcast, options).then((request) => request(this.axios, this.basePath));
    }
}


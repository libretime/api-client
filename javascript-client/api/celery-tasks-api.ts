/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CeleryTask } from '../model';
// @ts-ignore
import type { PatchedCeleryTask } from '../model';
/**
 * CeleryTasksApi - axios parameter creator
 * @export
 */
export const CeleryTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CeleryTask} celeryTask 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksCreate: async (celeryTask: CeleryTask, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'celeryTask' is not null or undefined
            assertParamExists('celeryTasksCreate', 'celeryTask', celeryTask)
            const localVarPath = `/api/v2/celery-tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(celeryTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('celeryTasksDestroy', 'id', id)
            const localVarPath = `/api/v2/celery-tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/celery-tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {PatchedCeleryTask} [patchedCeleryTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksPartialUpdate: async (id: number, patchedCeleryTask?: PatchedCeleryTask, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('celeryTasksPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/celery-tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCeleryTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('celeryTasksRetrieve', 'id', id)
            const localVarPath = `/api/v2/celery-tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {CeleryTask} celeryTask 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksUpdate: async (id: number, celeryTask: CeleryTask, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('celeryTasksUpdate', 'id', id)
            // verify required parameter 'celeryTask' is not null or undefined
            assertParamExists('celeryTasksUpdate', 'celeryTask', celeryTask)
            const localVarPath = `/api/v2/celery-tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(celeryTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CeleryTasksApi - functional programming interface
 * @export
 */
export const CeleryTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CeleryTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CeleryTask} celeryTask 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async celeryTasksCreate(celeryTask: CeleryTask, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CeleryTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.celeryTasksCreate(celeryTask, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CeleryTasksApi.celeryTasksCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async celeryTasksDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.celeryTasksDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CeleryTasksApi.celeryTasksDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async celeryTasksList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CeleryTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.celeryTasksList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CeleryTasksApi.celeryTasksList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {PatchedCeleryTask} [patchedCeleryTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async celeryTasksPartialUpdate(id: number, patchedCeleryTask?: PatchedCeleryTask, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CeleryTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.celeryTasksPartialUpdate(id, patchedCeleryTask, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CeleryTasksApi.celeryTasksPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async celeryTasksRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CeleryTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.celeryTasksRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CeleryTasksApi.celeryTasksRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {CeleryTask} celeryTask 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async celeryTasksUpdate(id: number, celeryTask: CeleryTask, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CeleryTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.celeryTasksUpdate(id, celeryTask, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CeleryTasksApi.celeryTasksUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CeleryTasksApi - factory interface
 * @export
 */
export const CeleryTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CeleryTasksApiFp(configuration)
    return {
        /**
         * 
         * @param {CeleryTask} celeryTask 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksCreate(celeryTask: CeleryTask, options?: RawAxiosRequestConfig): AxiosPromise<CeleryTask> {
            return localVarFp.celeryTasksCreate(celeryTask, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.celeryTasksDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksList(options?: RawAxiosRequestConfig): AxiosPromise<Array<CeleryTask>> {
            return localVarFp.celeryTasksList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {PatchedCeleryTask} [patchedCeleryTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksPartialUpdate(id: number, patchedCeleryTask?: PatchedCeleryTask, options?: RawAxiosRequestConfig): AxiosPromise<CeleryTask> {
            return localVarFp.celeryTasksPartialUpdate(id, patchedCeleryTask, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CeleryTask> {
            return localVarFp.celeryTasksRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this celery task.
         * @param {CeleryTask} celeryTask 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        celeryTasksUpdate(id: number, celeryTask: CeleryTask, options?: RawAxiosRequestConfig): AxiosPromise<CeleryTask> {
            return localVarFp.celeryTasksUpdate(id, celeryTask, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CeleryTasksApi - object-oriented interface
 * @export
 * @class CeleryTasksApi
 * @extends {BaseAPI}
 */
export class CeleryTasksApi extends BaseAPI {
    /**
     * 
     * @param {CeleryTask} celeryTask 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CeleryTasksApi
     */
    public celeryTasksCreate(celeryTask: CeleryTask, options?: RawAxiosRequestConfig) {
        return CeleryTasksApiFp(this.configuration).celeryTasksCreate(celeryTask, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this celery task.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CeleryTasksApi
     */
    public celeryTasksDestroy(id: number, options?: RawAxiosRequestConfig) {
        return CeleryTasksApiFp(this.configuration).celeryTasksDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CeleryTasksApi
     */
    public celeryTasksList(options?: RawAxiosRequestConfig) {
        return CeleryTasksApiFp(this.configuration).celeryTasksList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this celery task.
     * @param {PatchedCeleryTask} [patchedCeleryTask] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CeleryTasksApi
     */
    public celeryTasksPartialUpdate(id: number, patchedCeleryTask?: PatchedCeleryTask, options?: RawAxiosRequestConfig) {
        return CeleryTasksApiFp(this.configuration).celeryTasksPartialUpdate(id, patchedCeleryTask, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this celery task.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CeleryTasksApi
     */
    public celeryTasksRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return CeleryTasksApiFp(this.configuration).celeryTasksRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this celery task.
     * @param {CeleryTask} celeryTask 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CeleryTasksApi
     */
    public celeryTasksUpdate(id: number, celeryTask: CeleryTask, options?: RawAxiosRequestConfig) {
        return CeleryTasksApiFp(this.configuration).celeryTasksUpdate(id, celeryTask, options).then((request) => request(this.axios, this.basePath));
    }
}


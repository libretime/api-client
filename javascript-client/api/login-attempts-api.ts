/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { LoginAttempt } from '../model';
// @ts-ignore
import { PatchedLoginAttempt } from '../model';
/**
 * LoginAttemptsApi - axios parameter creator
 * @export
 */
export const LoginAttemptsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginAttempt} loginAttempt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsCreate: async (loginAttempt: LoginAttempt, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginAttempt' is not null or undefined
            assertParamExists('loginAttemptsCreate', 'loginAttempt', loginAttempt)
            const localVarPath = `/api/v2/login-attempts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginAttempt, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsDestroy: async (ip: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ip' is not null or undefined
            assertParamExists('loginAttemptsDestroy', 'ip', ip)
            const localVarPath = `/api/v2/login-attempts/{ip}`
                .replace(`{${"ip"}}`, encodeURIComponent(String(ip)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/login-attempts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {PatchedLoginAttempt} [patchedLoginAttempt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsPartialUpdate: async (ip: string, patchedLoginAttempt?: PatchedLoginAttempt, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ip' is not null or undefined
            assertParamExists('loginAttemptsPartialUpdate', 'ip', ip)
            const localVarPath = `/api/v2/login-attempts/{ip}`
                .replace(`{${"ip"}}`, encodeURIComponent(String(ip)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedLoginAttempt, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsRetrieve: async (ip: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ip' is not null or undefined
            assertParamExists('loginAttemptsRetrieve', 'ip', ip)
            const localVarPath = `/api/v2/login-attempts/{ip}`
                .replace(`{${"ip"}}`, encodeURIComponent(String(ip)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {LoginAttempt} loginAttempt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsUpdate: async (ip: string, loginAttempt: LoginAttempt, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ip' is not null or undefined
            assertParamExists('loginAttemptsUpdate', 'ip', ip)
            // verify required parameter 'loginAttempt' is not null or undefined
            assertParamExists('loginAttemptsUpdate', 'loginAttempt', loginAttempt)
            const localVarPath = `/api/v2/login-attempts/{ip}`
                .replace(`{${"ip"}}`, encodeURIComponent(String(ip)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginAttempt, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginAttemptsApi - functional programming interface
 * @export
 */
export const LoginAttemptsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginAttemptsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginAttempt} loginAttempt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAttemptsCreate(loginAttempt: LoginAttempt, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginAttempt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAttemptsCreate(loginAttempt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginAttemptsApi.loginAttemptsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAttemptsDestroy(ip: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAttemptsDestroy(ip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginAttemptsApi.loginAttemptsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAttemptsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LoginAttempt>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAttemptsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginAttemptsApi.loginAttemptsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {PatchedLoginAttempt} [patchedLoginAttempt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAttemptsPartialUpdate(ip: string, patchedLoginAttempt?: PatchedLoginAttempt, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginAttempt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAttemptsPartialUpdate(ip, patchedLoginAttempt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginAttemptsApi.loginAttemptsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAttemptsRetrieve(ip: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginAttempt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAttemptsRetrieve(ip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginAttemptsApi.loginAttemptsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {LoginAttempt} loginAttempt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAttemptsUpdate(ip: string, loginAttempt: LoginAttempt, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginAttempt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAttemptsUpdate(ip, loginAttempt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginAttemptsApi.loginAttemptsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoginAttemptsApi - factory interface
 * @export
 */
export const LoginAttemptsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginAttemptsApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginAttempt} loginAttempt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsCreate(loginAttempt: LoginAttempt, options?: any): AxiosPromise<LoginAttempt> {
            return localVarFp.loginAttemptsCreate(loginAttempt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsDestroy(ip: string, options?: any): AxiosPromise<void> {
            return localVarFp.loginAttemptsDestroy(ip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsList(options?: any): AxiosPromise<Array<LoginAttempt>> {
            return localVarFp.loginAttemptsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {PatchedLoginAttempt} [patchedLoginAttempt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsPartialUpdate(ip: string, patchedLoginAttempt?: PatchedLoginAttempt, options?: any): AxiosPromise<LoginAttempt> {
            return localVarFp.loginAttemptsPartialUpdate(ip, patchedLoginAttempt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsRetrieve(ip: string, options?: any): AxiosPromise<LoginAttempt> {
            return localVarFp.loginAttemptsRetrieve(ip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} ip A unique value identifying this login attempt.
         * @param {LoginAttempt} loginAttempt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAttemptsUpdate(ip: string, loginAttempt: LoginAttempt, options?: any): AxiosPromise<LoginAttempt> {
            return localVarFp.loginAttemptsUpdate(ip, loginAttempt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginAttemptsApi - object-oriented interface
 * @export
 * @class LoginAttemptsApi
 * @extends {BaseAPI}
 */
export class LoginAttemptsApi extends BaseAPI {
    /**
     * 
     * @param {LoginAttempt} loginAttempt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginAttemptsApi
     */
    public loginAttemptsCreate(loginAttempt: LoginAttempt, options?: RawAxiosRequestConfig) {
        return LoginAttemptsApiFp(this.configuration).loginAttemptsCreate(loginAttempt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ip A unique value identifying this login attempt.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginAttemptsApi
     */
    public loginAttemptsDestroy(ip: string, options?: RawAxiosRequestConfig) {
        return LoginAttemptsApiFp(this.configuration).loginAttemptsDestroy(ip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginAttemptsApi
     */
    public loginAttemptsList(options?: RawAxiosRequestConfig) {
        return LoginAttemptsApiFp(this.configuration).loginAttemptsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ip A unique value identifying this login attempt.
     * @param {PatchedLoginAttempt} [patchedLoginAttempt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginAttemptsApi
     */
    public loginAttemptsPartialUpdate(ip: string, patchedLoginAttempt?: PatchedLoginAttempt, options?: RawAxiosRequestConfig) {
        return LoginAttemptsApiFp(this.configuration).loginAttemptsPartialUpdate(ip, patchedLoginAttempt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ip A unique value identifying this login attempt.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginAttemptsApi
     */
    public loginAttemptsRetrieve(ip: string, options?: RawAxiosRequestConfig) {
        return LoginAttemptsApiFp(this.configuration).loginAttemptsRetrieve(ip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} ip A unique value identifying this login attempt.
     * @param {LoginAttempt} loginAttempt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginAttemptsApi
     */
    public loginAttemptsUpdate(ip: string, loginAttempt: LoginAttempt, options?: RawAxiosRequestConfig) {
        return LoginAttemptsApiFp(this.configuration).loginAttemptsUpdate(ip, loginAttempt, options).then((request) => request(this.axios, this.basePath));
    }
}


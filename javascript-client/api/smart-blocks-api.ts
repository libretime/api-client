/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchedSmartBlock } from '../model';
// @ts-ignore
import { SmartBlock } from '../model';
/**
 * SmartBlocksApi - axios parameter creator
 * @export
 */
export const SmartBlocksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SmartBlock} smartBlock 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksCreate: async (smartBlock: SmartBlock, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'smartBlock' is not null or undefined
            assertParamExists('smartBlocksCreate', 'smartBlock', smartBlock)
            const localVarPath = `/api/v2/smart-blocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(smartBlock, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('smartBlocksDestroy', 'id', id)
            const localVarPath = `/api/v2/smart-blocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/smart-blocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {PatchedSmartBlock} [patchedSmartBlock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksPartialUpdate: async (id: number, patchedSmartBlock?: PatchedSmartBlock, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('smartBlocksPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/smart-blocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSmartBlock, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('smartBlocksRetrieve', 'id', id)
            const localVarPath = `/api/v2/smart-blocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {SmartBlock} smartBlock 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksUpdate: async (id: number, smartBlock: SmartBlock, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('smartBlocksUpdate', 'id', id)
            // verify required parameter 'smartBlock' is not null or undefined
            assertParamExists('smartBlocksUpdate', 'smartBlock', smartBlock)
            const localVarPath = `/api/v2/smart-blocks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(smartBlock, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SmartBlocksApi - functional programming interface
 * @export
 */
export const SmartBlocksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SmartBlocksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SmartBlock} smartBlock 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlocksCreate(smartBlock: SmartBlock, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartBlock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlocksCreate(smartBlock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlocksDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlocksDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlocksList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SmartBlock>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlocksList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {PatchedSmartBlock} [patchedSmartBlock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlocksPartialUpdate(id: number, patchedSmartBlock?: PatchedSmartBlock, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartBlock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlocksPartialUpdate(id, patchedSmartBlock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlocksRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartBlock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlocksRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {SmartBlock} smartBlock 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartBlocksUpdate(id: number, smartBlock: SmartBlock, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmartBlock>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartBlocksUpdate(id, smartBlock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SmartBlocksApi - factory interface
 * @export
 */
export const SmartBlocksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SmartBlocksApiFp(configuration)
    return {
        /**
         * 
         * @param {SmartBlock} smartBlock 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksCreate(smartBlock: SmartBlock, options?: any): AxiosPromise<SmartBlock> {
            return localVarFp.smartBlocksCreate(smartBlock, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.smartBlocksDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksList(options?: any): AxiosPromise<Array<SmartBlock>> {
            return localVarFp.smartBlocksList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {PatchedSmartBlock} [patchedSmartBlock] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksPartialUpdate(id: number, patchedSmartBlock?: PatchedSmartBlock, options?: any): AxiosPromise<SmartBlock> {
            return localVarFp.smartBlocksPartialUpdate(id, patchedSmartBlock, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksRetrieve(id: number, options?: any): AxiosPromise<SmartBlock> {
            return localVarFp.smartBlocksRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this smart block.
         * @param {SmartBlock} smartBlock 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartBlocksUpdate(id: number, smartBlock: SmartBlock, options?: any): AxiosPromise<SmartBlock> {
            return localVarFp.smartBlocksUpdate(id, smartBlock, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SmartBlocksApi - object-oriented interface
 * @export
 * @class SmartBlocksApi
 * @extends {BaseAPI}
 */
export class SmartBlocksApi extends BaseAPI {
    /**
     * 
     * @param {SmartBlock} smartBlock 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlocksApi
     */
    public smartBlocksCreate(smartBlock: SmartBlock, options?: AxiosRequestConfig) {
        return SmartBlocksApiFp(this.configuration).smartBlocksCreate(smartBlock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this smart block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlocksApi
     */
    public smartBlocksDestroy(id: number, options?: AxiosRequestConfig) {
        return SmartBlocksApiFp(this.configuration).smartBlocksDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlocksApi
     */
    public smartBlocksList(options?: AxiosRequestConfig) {
        return SmartBlocksApiFp(this.configuration).smartBlocksList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this smart block.
     * @param {PatchedSmartBlock} [patchedSmartBlock] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlocksApi
     */
    public smartBlocksPartialUpdate(id: number, patchedSmartBlock?: PatchedSmartBlock, options?: AxiosRequestConfig) {
        return SmartBlocksApiFp(this.configuration).smartBlocksPartialUpdate(id, patchedSmartBlock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this smart block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlocksApi
     */
    public smartBlocksRetrieve(id: number, options?: AxiosRequestConfig) {
        return SmartBlocksApiFp(this.configuration).smartBlocksRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this smart block.
     * @param {SmartBlock} smartBlock 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartBlocksApi
     */
    public smartBlocksUpdate(id: number, smartBlock: SmartBlock, options?: AxiosRequestConfig) {
        return SmartBlocksApiFp(this.configuration).smartBlocksUpdate(id, smartBlock, options).then((request) => request(this.axios, this.basePath));
    }
}


/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchedUserToken } from '../model';
// @ts-ignore
import { UserToken } from '../model';
/**
 * UserTokensApi - axios parameter creator
 * @export
 */
export const UserTokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserToken} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensCreate: async (userToken: UserToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userToken' is not null or undefined
            assertParamExists('userTokensCreate', 'userToken', userToken)
            const localVarPath = `/api/v2/user-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userTokensDestroy', 'id', id)
            const localVarPath = `/api/v2/user-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/user-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {PatchedUserToken} [patchedUserToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensPartialUpdate: async (id: number, patchedUserToken?: PatchedUserToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userTokensPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/user-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUserToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userTokensRetrieve', 'id', id)
            const localVarPath = `/api/v2/user-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {UserToken} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensUpdate: async (id: number, userToken: UserToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userTokensUpdate', 'id', id)
            // verify required parameter 'userToken' is not null or undefined
            assertParamExists('userTokensUpdate', 'userToken', userToken)
            const localVarPath = `/api/v2/user-tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTokensApi - functional programming interface
 * @export
 */
export const UserTokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTokensApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserToken} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTokensCreate(userToken: UserToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTokensCreate(userToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTokensDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTokensDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTokensList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserToken>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTokensList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {PatchedUserToken} [patchedUserToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTokensPartialUpdate(id: number, patchedUserToken?: PatchedUserToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTokensPartialUpdate(id, patchedUserToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTokensRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTokensRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {UserToken} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTokensUpdate(id: number, userToken: UserToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTokensUpdate(id, userToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserTokensApi - factory interface
 * @export
 */
export const UserTokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTokensApiFp(configuration)
    return {
        /**
         * 
         * @param {UserToken} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensCreate(userToken: UserToken, options?: any): AxiosPromise<UserToken> {
            return localVarFp.userTokensCreate(userToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.userTokensDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensList(options?: any): AxiosPromise<Array<UserToken>> {
            return localVarFp.userTokensList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {PatchedUserToken} [patchedUserToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensPartialUpdate(id: number, patchedUserToken?: PatchedUserToken, options?: any): AxiosPromise<UserToken> {
            return localVarFp.userTokensPartialUpdate(id, patchedUserToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensRetrieve(id: number, options?: any): AxiosPromise<UserToken> {
            return localVarFp.userTokensRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this user token.
         * @param {UserToken} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTokensUpdate(id: number, userToken: UserToken, options?: any): AxiosPromise<UserToken> {
            return localVarFp.userTokensUpdate(id, userToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserTokensApi - object-oriented interface
 * @export
 * @class UserTokensApi
 * @extends {BaseAPI}
 */
export class UserTokensApi extends BaseAPI {
    /**
     * 
     * @param {UserToken} userToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokensApi
     */
    public userTokensCreate(userToken: UserToken, options?: AxiosRequestConfig) {
        return UserTokensApiFp(this.configuration).userTokensCreate(userToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this user token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokensApi
     */
    public userTokensDestroy(id: number, options?: AxiosRequestConfig) {
        return UserTokensApiFp(this.configuration).userTokensDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokensApi
     */
    public userTokensList(options?: AxiosRequestConfig) {
        return UserTokensApiFp(this.configuration).userTokensList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this user token.
     * @param {PatchedUserToken} [patchedUserToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokensApi
     */
    public userTokensPartialUpdate(id: number, patchedUserToken?: PatchedUserToken, options?: AxiosRequestConfig) {
        return UserTokensApiFp(this.configuration).userTokensPartialUpdate(id, patchedUserToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this user token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokensApi
     */
    public userTokensRetrieve(id: number, options?: AxiosRequestConfig) {
        return UserTokensApiFp(this.configuration).userTokensRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this user token.
     * @param {UserToken} userToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokensApi
     */
    public userTokensUpdate(id: number, userToken: UserToken, options?: AxiosRequestConfig) {
        return UserTokensApiFp(this.configuration).userTokensUpdate(id, userToken, options).then((request) => request(this.axios, this.basePath));
    }
}


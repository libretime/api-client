/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PatchedPlaylistContent } from '../model';
// @ts-ignore
import type { PlaylistContent } from '../model';
/**
 * PlaylistContentsApi - axios parameter creator
 * @export
 */
export const PlaylistContentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PlaylistContent} playlistContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsCreate: async (playlistContent: PlaylistContent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistContent' is not null or undefined
            assertParamExists('playlistContentsCreate', 'playlistContent', playlistContent)
            const localVarPath = `/api/v2/playlist-contents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playlistContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playlistContentsDestroy', 'id', id)
            const localVarPath = `/api/v2/playlist-contents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/playlist-contents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {PatchedPlaylistContent} [patchedPlaylistContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsPartialUpdate: async (id: number, patchedPlaylistContent?: PatchedPlaylistContent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playlistContentsPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/playlist-contents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPlaylistContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playlistContentsRetrieve', 'id', id)
            const localVarPath = `/api/v2/playlist-contents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {PlaylistContent} playlistContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsUpdate: async (id: number, playlistContent: PlaylistContent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playlistContentsUpdate', 'id', id)
            // verify required parameter 'playlistContent' is not null or undefined
            assertParamExists('playlistContentsUpdate', 'playlistContent', playlistContent)
            const localVarPath = `/api/v2/playlist-contents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playlistContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaylistContentsApi - functional programming interface
 * @export
 */
export const PlaylistContentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaylistContentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PlaylistContent} playlistContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playlistContentsCreate(playlistContent: PlaylistContent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playlistContentsCreate(playlistContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistContentsApi.playlistContentsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playlistContentsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playlistContentsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistContentsApi.playlistContentsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playlistContentsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlaylistContent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playlistContentsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistContentsApi.playlistContentsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {PatchedPlaylistContent} [patchedPlaylistContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playlistContentsPartialUpdate(id: number, patchedPlaylistContent?: PatchedPlaylistContent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playlistContentsPartialUpdate(id, patchedPlaylistContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistContentsApi.playlistContentsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playlistContentsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playlistContentsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistContentsApi.playlistContentsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {PlaylistContent} playlistContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playlistContentsUpdate(id: number, playlistContent: PlaylistContent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playlistContentsUpdate(id, playlistContent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistContentsApi.playlistContentsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlaylistContentsApi - factory interface
 * @export
 */
export const PlaylistContentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaylistContentsApiFp(configuration)
    return {
        /**
         * 
         * @param {PlaylistContent} playlistContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsCreate(playlistContent: PlaylistContent, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistContent> {
            return localVarFp.playlistContentsCreate(playlistContent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.playlistContentsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<PlaylistContent>> {
            return localVarFp.playlistContentsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {PatchedPlaylistContent} [patchedPlaylistContent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsPartialUpdate(id: number, patchedPlaylistContent?: PatchedPlaylistContent, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistContent> {
            return localVarFp.playlistContentsPartialUpdate(id, patchedPlaylistContent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistContent> {
            return localVarFp.playlistContentsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playlist content.
         * @param {PlaylistContent} playlistContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistContentsUpdate(id: number, playlistContent: PlaylistContent, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistContent> {
            return localVarFp.playlistContentsUpdate(id, playlistContent, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaylistContentsApi - object-oriented interface
 * @export
 * @class PlaylistContentsApi
 * @extends {BaseAPI}
 */
export class PlaylistContentsApi extends BaseAPI {
    /**
     * 
     * @param {PlaylistContent} playlistContent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistContentsApi
     */
    public playlistContentsCreate(playlistContent: PlaylistContent, options?: RawAxiosRequestConfig) {
        return PlaylistContentsApiFp(this.configuration).playlistContentsCreate(playlistContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playlist content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistContentsApi
     */
    public playlistContentsDestroy(id: number, options?: RawAxiosRequestConfig) {
        return PlaylistContentsApiFp(this.configuration).playlistContentsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistContentsApi
     */
    public playlistContentsList(options?: RawAxiosRequestConfig) {
        return PlaylistContentsApiFp(this.configuration).playlistContentsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playlist content.
     * @param {PatchedPlaylistContent} [patchedPlaylistContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistContentsApi
     */
    public playlistContentsPartialUpdate(id: number, patchedPlaylistContent?: PatchedPlaylistContent, options?: RawAxiosRequestConfig) {
        return PlaylistContentsApiFp(this.configuration).playlistContentsPartialUpdate(id, patchedPlaylistContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playlist content.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistContentsApi
     */
    public playlistContentsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return PlaylistContentsApiFp(this.configuration).playlistContentsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playlist content.
     * @param {PlaylistContent} playlistContent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistContentsApi
     */
    public playlistContentsUpdate(id: number, playlistContent: PlaylistContent, options?: RawAxiosRequestConfig) {
        return PlaylistContentsApiFp(this.configuration).playlistContentsUpdate(id, playlistContent, options).then((request) => request(this.axios, this.basePath));
    }
}


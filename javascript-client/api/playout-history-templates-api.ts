/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PatchedPlayoutHistoryTemplate } from '../model';
// @ts-ignore
import type { PlayoutHistoryTemplate } from '../model';
/**
 * PlayoutHistoryTemplatesApi - axios parameter creator
 * @export
 */
export const PlayoutHistoryTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PlayoutHistoryTemplate} playoutHistoryTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesCreate: async (playoutHistoryTemplate: PlayoutHistoryTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playoutHistoryTemplate' is not null or undefined
            assertParamExists('playoutHistoryTemplatesCreate', 'playoutHistoryTemplate', playoutHistoryTemplate)
            const localVarPath = `/api/v2/playout-history-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playoutHistoryTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryTemplatesDestroy', 'id', id)
            const localVarPath = `/api/v2/playout-history-templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/playout-history-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {PatchedPlayoutHistoryTemplate} [patchedPlayoutHistoryTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesPartialUpdate: async (id: number, patchedPlayoutHistoryTemplate?: PatchedPlayoutHistoryTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryTemplatesPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/playout-history-templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPlayoutHistoryTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryTemplatesRetrieve', 'id', id)
            const localVarPath = `/api/v2/playout-history-templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {PlayoutHistoryTemplate} playoutHistoryTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesUpdate: async (id: number, playoutHistoryTemplate: PlayoutHistoryTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryTemplatesUpdate', 'id', id)
            // verify required parameter 'playoutHistoryTemplate' is not null or undefined
            assertParamExists('playoutHistoryTemplatesUpdate', 'playoutHistoryTemplate', playoutHistoryTemplate)
            const localVarPath = `/api/v2/playout-history-templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playoutHistoryTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayoutHistoryTemplatesApi - functional programming interface
 * @export
 */
export const PlayoutHistoryTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayoutHistoryTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PlayoutHistoryTemplate} playoutHistoryTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplatesCreate(playoutHistoryTemplate: PlayoutHistoryTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplatesCreate(playoutHistoryTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplatesApi.playoutHistoryTemplatesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplatesDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplatesDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplatesApi.playoutHistoryTemplatesDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplatesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayoutHistoryTemplate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplatesList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplatesApi.playoutHistoryTemplatesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {PatchedPlayoutHistoryTemplate} [patchedPlayoutHistoryTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplatesPartialUpdate(id: number, patchedPlayoutHistoryTemplate?: PatchedPlayoutHistoryTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplatesPartialUpdate(id, patchedPlayoutHistoryTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplatesApi.playoutHistoryTemplatesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplatesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplatesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplatesApi.playoutHistoryTemplatesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {PlayoutHistoryTemplate} playoutHistoryTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplatesUpdate(id: number, playoutHistoryTemplate: PlayoutHistoryTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplatesUpdate(id, playoutHistoryTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplatesApi.playoutHistoryTemplatesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlayoutHistoryTemplatesApi - factory interface
 * @export
 */
export const PlayoutHistoryTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayoutHistoryTemplatesApiFp(configuration)
    return {
        /**
         * 
         * @param {PlayoutHistoryTemplate} playoutHistoryTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesCreate(playoutHistoryTemplate: PlayoutHistoryTemplate, options?: RawAxiosRequestConfig): AxiosPromise<PlayoutHistoryTemplate> {
            return localVarFp.playoutHistoryTemplatesCreate(playoutHistoryTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.playoutHistoryTemplatesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesList(options?: RawAxiosRequestConfig): AxiosPromise<Array<PlayoutHistoryTemplate>> {
            return localVarFp.playoutHistoryTemplatesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {PatchedPlayoutHistoryTemplate} [patchedPlayoutHistoryTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesPartialUpdate(id: number, patchedPlayoutHistoryTemplate?: PatchedPlayoutHistoryTemplate, options?: RawAxiosRequestConfig): AxiosPromise<PlayoutHistoryTemplate> {
            return localVarFp.playoutHistoryTemplatesPartialUpdate(id, patchedPlayoutHistoryTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<PlayoutHistoryTemplate> {
            return localVarFp.playoutHistoryTemplatesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template.
         * @param {PlayoutHistoryTemplate} playoutHistoryTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplatesUpdate(id: number, playoutHistoryTemplate: PlayoutHistoryTemplate, options?: RawAxiosRequestConfig): AxiosPromise<PlayoutHistoryTemplate> {
            return localVarFp.playoutHistoryTemplatesUpdate(id, playoutHistoryTemplate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayoutHistoryTemplatesApi - object-oriented interface
 * @export
 * @class PlayoutHistoryTemplatesApi
 * @extends {BaseAPI}
 */
export class PlayoutHistoryTemplatesApi extends BaseAPI {
    /**
     * 
     * @param {PlayoutHistoryTemplate} playoutHistoryTemplate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplatesApi
     */
    public playoutHistoryTemplatesCreate(playoutHistoryTemplate: PlayoutHistoryTemplate, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplatesApiFp(this.configuration).playoutHistoryTemplatesCreate(playoutHistoryTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplatesApi
     */
    public playoutHistoryTemplatesDestroy(id: number, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplatesApiFp(this.configuration).playoutHistoryTemplatesDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplatesApi
     */
    public playoutHistoryTemplatesList(options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplatesApiFp(this.configuration).playoutHistoryTemplatesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history template.
     * @param {PatchedPlayoutHistoryTemplate} [patchedPlayoutHistoryTemplate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplatesApi
     */
    public playoutHistoryTemplatesPartialUpdate(id: number, patchedPlayoutHistoryTemplate?: PatchedPlayoutHistoryTemplate, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplatesApiFp(this.configuration).playoutHistoryTemplatesPartialUpdate(id, patchedPlayoutHistoryTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplatesApi
     */
    public playoutHistoryTemplatesRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplatesApiFp(this.configuration).playoutHistoryTemplatesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history template.
     * @param {PlayoutHistoryTemplate} playoutHistoryTemplate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplatesApi
     */
    public playoutHistoryTemplatesUpdate(id: number, playoutHistoryTemplate: PlayoutHistoryTemplate, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplatesApiFp(this.configuration).playoutHistoryTemplatesUpdate(id, playoutHistoryTemplate, options).then((request) => request(this.axios, this.basePath));
    }
}


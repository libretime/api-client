/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { PatchedStationPodcast } from '../model';
// @ts-ignore
import { StationPodcast } from '../model';
/**
 * StationPodcastsApi - axios parameter creator
 * @export
 */
export const StationPodcastsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {StationPodcast} stationPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsCreate: async (stationPodcast: StationPodcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stationPodcast' is not null or undefined
            assertParamExists('stationPodcastsCreate', 'stationPodcast', stationPodcast)
            const localVarPath = `/api/v2/station-podcasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stationPodcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stationPodcastsDestroy', 'id', id)
            const localVarPath = `/api/v2/station-podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/station-podcasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {PatchedStationPodcast} [patchedStationPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsPartialUpdate: async (id: number, patchedStationPodcast?: PatchedStationPodcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stationPodcastsPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/station-podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedStationPodcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stationPodcastsRetrieve', 'id', id)
            const localVarPath = `/api/v2/station-podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {StationPodcast} stationPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsUpdate: async (id: number, stationPodcast: StationPodcast, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stationPodcastsUpdate', 'id', id)
            // verify required parameter 'stationPodcast' is not null or undefined
            assertParamExists('stationPodcastsUpdate', 'stationPodcast', stationPodcast)
            const localVarPath = `/api/v2/station-podcasts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stationPodcast, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StationPodcastsApi - functional programming interface
 * @export
 */
export const StationPodcastsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StationPodcastsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {StationPodcast} stationPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stationPodcastsCreate(stationPodcast: StationPodcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StationPodcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stationPodcastsCreate(stationPodcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationPodcastsApi.stationPodcastsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stationPodcastsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stationPodcastsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationPodcastsApi.stationPodcastsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stationPodcastsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StationPodcast>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stationPodcastsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationPodcastsApi.stationPodcastsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {PatchedStationPodcast} [patchedStationPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stationPodcastsPartialUpdate(id: number, patchedStationPodcast?: PatchedStationPodcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StationPodcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stationPodcastsPartialUpdate(id, patchedStationPodcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationPodcastsApi.stationPodcastsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stationPodcastsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StationPodcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stationPodcastsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationPodcastsApi.stationPodcastsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {StationPodcast} stationPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stationPodcastsUpdate(id: number, stationPodcast: StationPodcast, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StationPodcast>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stationPodcastsUpdate(id, stationPodcast, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationPodcastsApi.stationPodcastsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StationPodcastsApi - factory interface
 * @export
 */
export const StationPodcastsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StationPodcastsApiFp(configuration)
    return {
        /**
         * 
         * @param {StationPodcast} stationPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsCreate(stationPodcast: StationPodcast, options?: any): AxiosPromise<StationPodcast> {
            return localVarFp.stationPodcastsCreate(stationPodcast, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.stationPodcastsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsList(options?: any): AxiosPromise<Array<StationPodcast>> {
            return localVarFp.stationPodcastsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {PatchedStationPodcast} [patchedStationPodcast] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsPartialUpdate(id: number, patchedStationPodcast?: PatchedStationPodcast, options?: any): AxiosPromise<StationPodcast> {
            return localVarFp.stationPodcastsPartialUpdate(id, patchedStationPodcast, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsRetrieve(id: number, options?: any): AxiosPromise<StationPodcast> {
            return localVarFp.stationPodcastsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this station podcast.
         * @param {StationPodcast} stationPodcast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stationPodcastsUpdate(id: number, stationPodcast: StationPodcast, options?: any): AxiosPromise<StationPodcast> {
            return localVarFp.stationPodcastsUpdate(id, stationPodcast, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StationPodcastsApi - object-oriented interface
 * @export
 * @class StationPodcastsApi
 * @extends {BaseAPI}
 */
export class StationPodcastsApi extends BaseAPI {
    /**
     * 
     * @param {StationPodcast} stationPodcast 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationPodcastsApi
     */
    public stationPodcastsCreate(stationPodcast: StationPodcast, options?: RawAxiosRequestConfig) {
        return StationPodcastsApiFp(this.configuration).stationPodcastsCreate(stationPodcast, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this station podcast.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationPodcastsApi
     */
    public stationPodcastsDestroy(id: number, options?: RawAxiosRequestConfig) {
        return StationPodcastsApiFp(this.configuration).stationPodcastsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationPodcastsApi
     */
    public stationPodcastsList(options?: RawAxiosRequestConfig) {
        return StationPodcastsApiFp(this.configuration).stationPodcastsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this station podcast.
     * @param {PatchedStationPodcast} [patchedStationPodcast] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationPodcastsApi
     */
    public stationPodcastsPartialUpdate(id: number, patchedStationPodcast?: PatchedStationPodcast, options?: RawAxiosRequestConfig) {
        return StationPodcastsApiFp(this.configuration).stationPodcastsPartialUpdate(id, patchedStationPodcast, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this station podcast.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationPodcastsApi
     */
    public stationPodcastsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return StationPodcastsApiFp(this.configuration).stationPodcastsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this station podcast.
     * @param {StationPodcast} stationPodcast 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationPodcastsApi
     */
    public stationPodcastsUpdate(id: number, stationPodcast: StationPodcast, options?: RawAxiosRequestConfig) {
        return StationPodcastsApiFp(this.configuration).stationPodcastsUpdate(id, stationPodcast, options).then((request) => request(this.axios, this.basePath));
    }
}


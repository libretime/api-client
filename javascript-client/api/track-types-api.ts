/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchedTrackType } from '../model';
// @ts-ignore
import { TrackType } from '../model';
/**
 * TrackTypesApi - axios parameter creator
 * @export
 */
export const TrackTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TrackType} trackType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesCreate: async (trackType: TrackType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackType' is not null or undefined
            assertParamExists('trackTypesCreate', 'trackType', trackType)
            const localVarPath = `/api/v2/track-types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('trackTypesDestroy', 'id', id)
            const localVarPath = `/api/v2/track-types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/track-types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {PatchedTrackType} [patchedTrackType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesPartialUpdate: async (id: number, patchedTrackType?: PatchedTrackType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('trackTypesPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/track-types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedTrackType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('trackTypesRetrieve', 'id', id)
            const localVarPath = `/api/v2/track-types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {TrackType} trackType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesUpdate: async (id: number, trackType: TrackType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('trackTypesUpdate', 'id', id)
            // verify required parameter 'trackType' is not null or undefined
            assertParamExists('trackTypesUpdate', 'trackType', trackType)
            const localVarPath = `/api/v2/track-types/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrackTypesApi - functional programming interface
 * @export
 */
export const TrackTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrackTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TrackType} trackType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackTypesCreate(trackType: TrackType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackTypesCreate(trackType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackTypesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackTypesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackTypesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrackType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackTypesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {PatchedTrackType} [patchedTrackType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackTypesPartialUpdate(id: number, patchedTrackType?: PatchedTrackType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackTypesPartialUpdate(id, patchedTrackType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackTypesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackTypesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {TrackType} trackType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackTypesUpdate(id: number, trackType: TrackType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackTypesUpdate(id, trackType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrackTypesApi - factory interface
 * @export
 */
export const TrackTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrackTypesApiFp(configuration)
    return {
        /**
         * 
         * @param {TrackType} trackType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesCreate(trackType: TrackType, options?: any): AxiosPromise<TrackType> {
            return localVarFp.trackTypesCreate(trackType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.trackTypesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesList(options?: any): AxiosPromise<Array<TrackType>> {
            return localVarFp.trackTypesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {PatchedTrackType} [patchedTrackType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesPartialUpdate(id: number, patchedTrackType?: PatchedTrackType, options?: any): AxiosPromise<TrackType> {
            return localVarFp.trackTypesPartialUpdate(id, patchedTrackType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesRetrieve(id: number, options?: any): AxiosPromise<TrackType> {
            return localVarFp.trackTypesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this track type.
         * @param {TrackType} trackType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackTypesUpdate(id: number, trackType: TrackType, options?: any): AxiosPromise<TrackType> {
            return localVarFp.trackTypesUpdate(id, trackType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrackTypesApi - object-oriented interface
 * @export
 * @class TrackTypesApi
 * @extends {BaseAPI}
 */
export class TrackTypesApi extends BaseAPI {
    /**
     * 
     * @param {TrackType} trackType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackTypesApi
     */
    public trackTypesCreate(trackType: TrackType, options?: AxiosRequestConfig) {
        return TrackTypesApiFp(this.configuration).trackTypesCreate(trackType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this track type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackTypesApi
     */
    public trackTypesDestroy(id: number, options?: AxiosRequestConfig) {
        return TrackTypesApiFp(this.configuration).trackTypesDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackTypesApi
     */
    public trackTypesList(options?: AxiosRequestConfig) {
        return TrackTypesApiFp(this.configuration).trackTypesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this track type.
     * @param {PatchedTrackType} [patchedTrackType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackTypesApi
     */
    public trackTypesPartialUpdate(id: number, patchedTrackType?: PatchedTrackType, options?: AxiosRequestConfig) {
        return TrackTypesApiFp(this.configuration).trackTypesPartialUpdate(id, patchedTrackType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this track type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackTypesApi
     */
    public trackTypesRetrieve(id: number, options?: AxiosRequestConfig) {
        return TrackTypesApiFp(this.configuration).trackTypesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this track type.
     * @param {TrackType} trackType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackTypesApi
     */
    public trackTypesUpdate(id: number, trackType: TrackType, options?: AxiosRequestConfig) {
        return TrackTypesApiFp(this.configuration).trackTypesUpdate(id, trackType, options).then((request) => request(this.axios, this.basePath));
    }
}

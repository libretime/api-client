/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Country } from '../model';
// @ts-ignore
import { PatchedCountry } from '../model';
/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesCreate: async (country: Country, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('countriesCreate', 'country', country)
            const localVarPath = `/api/v2/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(country, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesDestroy: async (isocode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isocode' is not null or undefined
            assertParamExists('countriesDestroy', 'isocode', isocode)
            const localVarPath = `/api/v2/countries/{isocode}/`
                .replace(`{${"isocode"}}`, encodeURIComponent(String(isocode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {PatchedCountry} [patchedCountry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesPartialUpdate: async (isocode: string, patchedCountry?: PatchedCountry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isocode' is not null or undefined
            assertParamExists('countriesPartialUpdate', 'isocode', isocode)
            const localVarPath = `/api/v2/countries/{isocode}/`
                .replace(`{${"isocode"}}`, encodeURIComponent(String(isocode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCountry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesRetrieve: async (isocode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isocode' is not null or undefined
            assertParamExists('countriesRetrieve', 'isocode', isocode)
            const localVarPath = `/api/v2/countries/{isocode}/`
                .replace(`{${"isocode"}}`, encodeURIComponent(String(isocode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesUpdate: async (isocode: string, country: Country, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isocode' is not null or undefined
            assertParamExists('countriesUpdate', 'isocode', isocode)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('countriesUpdate', 'country', country)
            const localVarPath = `/api/v2/countries/{isocode}/`
                .replace(`{${"isocode"}}`, encodeURIComponent(String(isocode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(country, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesCreate(country: Country, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesCreate(country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesDestroy(isocode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesDestroy(isocode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Country>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {PatchedCountry} [patchedCountry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesPartialUpdate(isocode: string, patchedCountry?: PatchedCountry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesPartialUpdate(isocode, patchedCountry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesRetrieve(isocode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesRetrieve(isocode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesUpdate(isocode: string, country: Country, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesUpdate(isocode, country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesApiFp(configuration)
    return {
        /**
         * 
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesCreate(country: Country, options?: any): AxiosPromise<Country> {
            return localVarFp.countriesCreate(country, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesDestroy(isocode: string, options?: any): AxiosPromise<void> {
            return localVarFp.countriesDestroy(isocode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesList(options?: any): AxiosPromise<Array<Country>> {
            return localVarFp.countriesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {PatchedCountry} [patchedCountry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesPartialUpdate(isocode: string, patchedCountry?: PatchedCountry, options?: any): AxiosPromise<Country> {
            return localVarFp.countriesPartialUpdate(isocode, patchedCountry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesRetrieve(isocode: string, options?: any): AxiosPromise<Country> {
            return localVarFp.countriesRetrieve(isocode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} isocode A unique value identifying this country.
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesUpdate(isocode: string, country: Country, options?: any): AxiosPromise<Country> {
            return localVarFp.countriesUpdate(isocode, country, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI {
    /**
     * 
     * @param {Country} country 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public countriesCreate(country: Country, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).countriesCreate(country, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} isocode A unique value identifying this country.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public countriesDestroy(isocode: string, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).countriesDestroy(isocode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public countriesList(options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).countriesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} isocode A unique value identifying this country.
     * @param {PatchedCountry} [patchedCountry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public countriesPartialUpdate(isocode: string, patchedCountry?: PatchedCountry, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).countriesPartialUpdate(isocode, patchedCountry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} isocode A unique value identifying this country.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public countriesRetrieve(isocode: string, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).countriesRetrieve(isocode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} isocode A unique value identifying this country.
     * @param {Country} country 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public countriesUpdate(isocode: string, country: Country, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).countriesUpdate(isocode, country, options).then((request) => request(this.axios, this.basePath));
    }
}

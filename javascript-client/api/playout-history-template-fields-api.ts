/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PatchedPlayoutHistoryTemplateField } from '../model';
// @ts-ignore
import type { PlayoutHistoryTemplateField } from '../model';
/**
 * PlayoutHistoryTemplateFieldsApi - axios parameter creator
 * @export
 */
export const PlayoutHistoryTemplateFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PlayoutHistoryTemplateField} playoutHistoryTemplateField 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsCreate: async (playoutHistoryTemplateField: PlayoutHistoryTemplateField, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playoutHistoryTemplateField' is not null or undefined
            assertParamExists('playoutHistoryTemplateFieldsCreate', 'playoutHistoryTemplateField', playoutHistoryTemplateField)
            const localVarPath = `/api/v2/playout-history-template-fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playoutHistoryTemplateField, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryTemplateFieldsDestroy', 'id', id)
            const localVarPath = `/api/v2/playout-history-template-fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/playout-history-template-fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {PatchedPlayoutHistoryTemplateField} [patchedPlayoutHistoryTemplateField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsPartialUpdate: async (id: number, patchedPlayoutHistoryTemplateField?: PatchedPlayoutHistoryTemplateField, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryTemplateFieldsPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/playout-history-template-fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPlayoutHistoryTemplateField, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryTemplateFieldsRetrieve', 'id', id)
            const localVarPath = `/api/v2/playout-history-template-fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {PlayoutHistoryTemplateField} playoutHistoryTemplateField 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsUpdate: async (id: number, playoutHistoryTemplateField: PlayoutHistoryTemplateField, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryTemplateFieldsUpdate', 'id', id)
            // verify required parameter 'playoutHistoryTemplateField' is not null or undefined
            assertParamExists('playoutHistoryTemplateFieldsUpdate', 'playoutHistoryTemplateField', playoutHistoryTemplateField)
            const localVarPath = `/api/v2/playout-history-template-fields/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playoutHistoryTemplateField, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayoutHistoryTemplateFieldsApi - functional programming interface
 * @export
 */
export const PlayoutHistoryTemplateFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayoutHistoryTemplateFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PlayoutHistoryTemplateField} playoutHistoryTemplateField 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplateFieldsCreate(playoutHistoryTemplateField: PlayoutHistoryTemplateField, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryTemplateField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplateFieldsCreate(playoutHistoryTemplateField, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplateFieldsApi.playoutHistoryTemplateFieldsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplateFieldsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplateFieldsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplateFieldsApi.playoutHistoryTemplateFieldsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplateFieldsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayoutHistoryTemplateField>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplateFieldsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplateFieldsApi.playoutHistoryTemplateFieldsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {PatchedPlayoutHistoryTemplateField} [patchedPlayoutHistoryTemplateField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplateFieldsPartialUpdate(id: number, patchedPlayoutHistoryTemplateField?: PatchedPlayoutHistoryTemplateField, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryTemplateField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplateFieldsPartialUpdate(id, patchedPlayoutHistoryTemplateField, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplateFieldsApi.playoutHistoryTemplateFieldsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplateFieldsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryTemplateField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplateFieldsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplateFieldsApi.playoutHistoryTemplateFieldsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {PlayoutHistoryTemplateField} playoutHistoryTemplateField 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryTemplateFieldsUpdate(id: number, playoutHistoryTemplateField: PlayoutHistoryTemplateField, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryTemplateField>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryTemplateFieldsUpdate(id, playoutHistoryTemplateField, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayoutHistoryTemplateFieldsApi.playoutHistoryTemplateFieldsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlayoutHistoryTemplateFieldsApi - factory interface
 * @export
 */
export const PlayoutHistoryTemplateFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayoutHistoryTemplateFieldsApiFp(configuration)
    return {
        /**
         * 
         * @param {PlayoutHistoryTemplateField} playoutHistoryTemplateField 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsCreate(playoutHistoryTemplateField: PlayoutHistoryTemplateField, options?: any): AxiosPromise<PlayoutHistoryTemplateField> {
            return localVarFp.playoutHistoryTemplateFieldsCreate(playoutHistoryTemplateField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.playoutHistoryTemplateFieldsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsList(options?: any): AxiosPromise<Array<PlayoutHistoryTemplateField>> {
            return localVarFp.playoutHistoryTemplateFieldsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {PatchedPlayoutHistoryTemplateField} [patchedPlayoutHistoryTemplateField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsPartialUpdate(id: number, patchedPlayoutHistoryTemplateField?: PatchedPlayoutHistoryTemplateField, options?: any): AxiosPromise<PlayoutHistoryTemplateField> {
            return localVarFp.playoutHistoryTemplateFieldsPartialUpdate(id, patchedPlayoutHistoryTemplateField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsRetrieve(id: number, options?: any): AxiosPromise<PlayoutHistoryTemplateField> {
            return localVarFp.playoutHistoryTemplateFieldsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history template field.
         * @param {PlayoutHistoryTemplateField} playoutHistoryTemplateField 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryTemplateFieldsUpdate(id: number, playoutHistoryTemplateField: PlayoutHistoryTemplateField, options?: any): AxiosPromise<PlayoutHistoryTemplateField> {
            return localVarFp.playoutHistoryTemplateFieldsUpdate(id, playoutHistoryTemplateField, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayoutHistoryTemplateFieldsApi - object-oriented interface
 * @export
 * @class PlayoutHistoryTemplateFieldsApi
 * @extends {BaseAPI}
 */
export class PlayoutHistoryTemplateFieldsApi extends BaseAPI {
    /**
     * 
     * @param {PlayoutHistoryTemplateField} playoutHistoryTemplateField 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplateFieldsApi
     */
    public playoutHistoryTemplateFieldsCreate(playoutHistoryTemplateField: PlayoutHistoryTemplateField, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplateFieldsApiFp(this.configuration).playoutHistoryTemplateFieldsCreate(playoutHistoryTemplateField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history template field.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplateFieldsApi
     */
    public playoutHistoryTemplateFieldsDestroy(id: number, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplateFieldsApiFp(this.configuration).playoutHistoryTemplateFieldsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplateFieldsApi
     */
    public playoutHistoryTemplateFieldsList(options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplateFieldsApiFp(this.configuration).playoutHistoryTemplateFieldsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history template field.
     * @param {PatchedPlayoutHistoryTemplateField} [patchedPlayoutHistoryTemplateField] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplateFieldsApi
     */
    public playoutHistoryTemplateFieldsPartialUpdate(id: number, patchedPlayoutHistoryTemplateField?: PatchedPlayoutHistoryTemplateField, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplateFieldsApiFp(this.configuration).playoutHistoryTemplateFieldsPartialUpdate(id, patchedPlayoutHistoryTemplateField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history template field.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplateFieldsApi
     */
    public playoutHistoryTemplateFieldsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplateFieldsApiFp(this.configuration).playoutHistoryTemplateFieldsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history template field.
     * @param {PlayoutHistoryTemplateField} playoutHistoryTemplateField 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryTemplateFieldsApi
     */
    public playoutHistoryTemplateFieldsUpdate(id: number, playoutHistoryTemplateField: PlayoutHistoryTemplateField, options?: RawAxiosRequestConfig) {
        return PlayoutHistoryTemplateFieldsApiFp(this.configuration).playoutHistoryTemplateFieldsUpdate(id, playoutHistoryTemplateField, options).then((request) => request(this.axios, this.basePath));
    }
}


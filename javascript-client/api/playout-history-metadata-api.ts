/* tslint:disable */
/* eslint-disable */
/**
 * LibreTime API
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PatchedPlayoutHistoryMetadata } from '../model';
// @ts-ignore
import { PlayoutHistoryMetadata } from '../model';
/**
 * PlayoutHistoryMetadataApi - axios parameter creator
 * @export
 */
export const PlayoutHistoryMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PlayoutHistoryMetadata} playoutHistoryMetadata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataCreate: async (playoutHistoryMetadata: PlayoutHistoryMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playoutHistoryMetadata' is not null or undefined
            assertParamExists('playoutHistoryMetadataCreate', 'playoutHistoryMetadata', playoutHistoryMetadata)
            const localVarPath = `/api/v2/playout-history-metadata/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playoutHistoryMetadata, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryMetadataDestroy', 'id', id)
            const localVarPath = `/api/v2/playout-history-metadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/playout-history-metadata/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {PatchedPlayoutHistoryMetadata} [patchedPlayoutHistoryMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataPartialUpdate: async (id: number, patchedPlayoutHistoryMetadata?: PatchedPlayoutHistoryMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryMetadataPartialUpdate', 'id', id)
            const localVarPath = `/api/v2/playout-history-metadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPlayoutHistoryMetadata, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryMetadataRetrieve', 'id', id)
            const localVarPath = `/api/v2/playout-history-metadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {PlayoutHistoryMetadata} playoutHistoryMetadata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataUpdate: async (id: number, playoutHistoryMetadata: PlayoutHistoryMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('playoutHistoryMetadataUpdate', 'id', id)
            // verify required parameter 'playoutHistoryMetadata' is not null or undefined
            assertParamExists('playoutHistoryMetadataUpdate', 'playoutHistoryMetadata', playoutHistoryMetadata)
            const localVarPath = `/api/v2/playout-history-metadata/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playoutHistoryMetadata, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayoutHistoryMetadataApi - functional programming interface
 * @export
 */
export const PlayoutHistoryMetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayoutHistoryMetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PlayoutHistoryMetadata} playoutHistoryMetadata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryMetadataCreate(playoutHistoryMetadata: PlayoutHistoryMetadata, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryMetadataCreate(playoutHistoryMetadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryMetadataDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryMetadataDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryMetadataList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayoutHistoryMetadata>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryMetadataList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {PatchedPlayoutHistoryMetadata} [patchedPlayoutHistoryMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryMetadataPartialUpdate(id: number, patchedPlayoutHistoryMetadata?: PatchedPlayoutHistoryMetadata, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryMetadataPartialUpdate(id, patchedPlayoutHistoryMetadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryMetadataRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryMetadataRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {PlayoutHistoryMetadata} playoutHistoryMetadata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playoutHistoryMetadataUpdate(id: number, playoutHistoryMetadata: PlayoutHistoryMetadata, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayoutHistoryMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playoutHistoryMetadataUpdate(id, playoutHistoryMetadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlayoutHistoryMetadataApi - factory interface
 * @export
 */
export const PlayoutHistoryMetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayoutHistoryMetadataApiFp(configuration)
    return {
        /**
         * 
         * @param {PlayoutHistoryMetadata} playoutHistoryMetadata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataCreate(playoutHistoryMetadata: PlayoutHistoryMetadata, options?: any): AxiosPromise<PlayoutHistoryMetadata> {
            return localVarFp.playoutHistoryMetadataCreate(playoutHistoryMetadata, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.playoutHistoryMetadataDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataList(options?: any): AxiosPromise<Array<PlayoutHistoryMetadata>> {
            return localVarFp.playoutHistoryMetadataList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {PatchedPlayoutHistoryMetadata} [patchedPlayoutHistoryMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataPartialUpdate(id: number, patchedPlayoutHistoryMetadata?: PatchedPlayoutHistoryMetadata, options?: any): AxiosPromise<PlayoutHistoryMetadata> {
            return localVarFp.playoutHistoryMetadataPartialUpdate(id, patchedPlayoutHistoryMetadata, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataRetrieve(id: number, options?: any): AxiosPromise<PlayoutHistoryMetadata> {
            return localVarFp.playoutHistoryMetadataRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this playout history metadata.
         * @param {PlayoutHistoryMetadata} playoutHistoryMetadata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playoutHistoryMetadataUpdate(id: number, playoutHistoryMetadata: PlayoutHistoryMetadata, options?: any): AxiosPromise<PlayoutHistoryMetadata> {
            return localVarFp.playoutHistoryMetadataUpdate(id, playoutHistoryMetadata, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayoutHistoryMetadataApi - object-oriented interface
 * @export
 * @class PlayoutHistoryMetadataApi
 * @extends {BaseAPI}
 */
export class PlayoutHistoryMetadataApi extends BaseAPI {
    /**
     * 
     * @param {PlayoutHistoryMetadata} playoutHistoryMetadata 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryMetadataApi
     */
    public playoutHistoryMetadataCreate(playoutHistoryMetadata: PlayoutHistoryMetadata, options?: AxiosRequestConfig) {
        return PlayoutHistoryMetadataApiFp(this.configuration).playoutHistoryMetadataCreate(playoutHistoryMetadata, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryMetadataApi
     */
    public playoutHistoryMetadataDestroy(id: number, options?: AxiosRequestConfig) {
        return PlayoutHistoryMetadataApiFp(this.configuration).playoutHistoryMetadataDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryMetadataApi
     */
    public playoutHistoryMetadataList(options?: AxiosRequestConfig) {
        return PlayoutHistoryMetadataApiFp(this.configuration).playoutHistoryMetadataList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history metadata.
     * @param {PatchedPlayoutHistoryMetadata} [patchedPlayoutHistoryMetadata] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryMetadataApi
     */
    public playoutHistoryMetadataPartialUpdate(id: number, patchedPlayoutHistoryMetadata?: PatchedPlayoutHistoryMetadata, options?: AxiosRequestConfig) {
        return PlayoutHistoryMetadataApiFp(this.configuration).playoutHistoryMetadataPartialUpdate(id, patchedPlayoutHistoryMetadata, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryMetadataApi
     */
    public playoutHistoryMetadataRetrieve(id: number, options?: AxiosRequestConfig) {
        return PlayoutHistoryMetadataApiFp(this.configuration).playoutHistoryMetadataRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this playout history metadata.
     * @param {PlayoutHistoryMetadata} playoutHistoryMetadata 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayoutHistoryMetadataApi
     */
    public playoutHistoryMetadataUpdate(id: number, playoutHistoryMetadata: PlayoutHistoryMetadata, options?: AxiosRequestConfig) {
        return PlayoutHistoryMetadataApiFp(this.configuration).playoutHistoryMetadataUpdate(id, playoutHistoryMetadata, options).then((request) => request(this.axios, this.basePath));
    }
}
